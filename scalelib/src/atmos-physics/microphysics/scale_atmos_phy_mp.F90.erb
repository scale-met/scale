% # -*- f90 -*-
% # vi: set sw=4 ts=8:
% types = %w(dry kessler tomita08 sn14 suzuki10 sdm)
!-------------------------------------------------------------------------------
!> module ATMOSPHERE / Physics Cloud Microphysics
!!
!! @par Description
!!         Cloud Microphysics
!!
!! @author Team SCALE
!!
!! @par History
!! @li      2013-12-06 (S.Nishizawa) [new]
!! @li      2015-09-08 (Y.Sato)      [mod] Add evaporated cloud number concentration
!!
!<
! Warning: This file was generated from <%=__FILE__%>.
!          Do not edit this file.
!-------------------------------------------------------------------------------
module scale_atmos_phy_mp
  !-----------------------------------------------------------------------------
  !
  !++ used modules
  !
  use scale_precision
  use scale_stdio
  use scale_prof
  use scale_grid_index
  use scale_tracer
  !-----------------------------------------------------------------------------
  implicit none
  private
  !-----------------------------------------------------------------------------
  !
  !++ Public procedure
  !
  public :: ATMOS_PHY_MP_config

  abstract interface
     subroutine mp( &
          DENS,      &
          MOMZ,      &
          MOMX,      &
          MOMY,      &
          RHOT,      &
          QTRC,      &
          CCN,       &
          EVAPORATE, &
          SFLX_rain, &
          SFLX_snow  )
       use scale_precision
       use scale_grid_index
       use scale_tracer
       real(RP), intent(inout) :: DENS(KA,IA,JA)
       real(RP), intent(inout) :: MOMZ(KA,IA,JA)
       real(RP), intent(inout) :: MOMX(KA,IA,JA)
       real(RP), intent(inout) :: MOMY(KA,IA,JA)
       real(RP), intent(inout) :: RHOT(KA,IA,JA)
       real(RP), intent(inout) :: QTRC(KA,IA,JA,QA)
       real(RP), intent(in)    :: CCN(KA,IA,JA)
       real(RP), intent(out)   :: EVAPORATE(KA,IA,JA)
       real(RP), intent(out)   :: SFLX_rain(IA,JA)
       real(RP), intent(out)   :: SFLX_snow(IA,JA)
     end subroutine mp
     subroutine su
     end subroutine su
     subroutine cf( &
          cldfrac,       &
          QTRC,          &
          mask_criterion )
       use scale_precision
       use scale_grid_index
       use scale_tracer
       real(RP), intent(out) :: cldfrac(KA,IA,JA)
       real(RP), intent(in)  :: QTRC   (KA,IA,JA,QA)
       real(RP), intent(in)  :: mask_criterion
     end subroutine cf
     subroutine er( &
          Re,    &
          QTRC0, &
          DENS0, &
          TEMP0  )
       use scale_precision
       use scale_grid_index
       use scale_tracer
       use scale_atmos_hydrometeor, only: N_HYD
       real(RP), intent(out) :: Re   (KA,IA,JA,N_HYD) ! effective radius          [cm]
       real(RP), intent(in)  :: QTRC0(KA,IA,JA,QA)    ! tracer mass concentration [kg/kg]
       real(RP), intent(in)  :: DENS0(KA,IA,JA)       ! density                   [kg/m3]
       real(RP), intent(in)  :: TEMP0(KA,IA,JA)       ! temperature               [K]
     end subroutine er
     subroutine mr( &
          Qe,   &
          QTRC0 )
       use scale_precision
       use scale_grid_index
       use scale_tracer
       use scale_atmos_hydrometeor, only: N_HYD
       real(RP), intent(out) :: Qe   (KA,IA,JA,N_HYD) ! mixing ratio of each cateory [kg/kg]
       real(RP), intent(in)  :: QTRC0(KA,IA,JA,QA)    ! tracer mass concentration [kg/kg]
     end subroutine mr
  end interface
  procedure(mp), pointer :: ATMOS_PHY_MP => NULL()
  procedure(su), pointer :: ATMOS_PHY_MP_setup => NULL()
  procedure(cf), pointer :: ATMOS_PHY_MP_CloudFraction => NULL()
  procedure(er), pointer :: ATMOS_PHY_MP_EffectiveRadius => NULL()
  procedure(mr), pointer :: ATMOS_PHY_MP_MixingRatio => NULL()
  public :: ATMOS_PHY_MP
  public :: ATMOS_PHY_MP_setup
  public :: ATMOS_PHY_MP_CloudFraction
  public :: ATMOS_PHY_MP_EffectiveRadius
  public :: ATMOS_PHY_MP_MixingRatio
  !-----------------------------------------------------------------------------
  !
  !++ Public parameters & variables
  !
  integer, public    :: QA_MP =  0 ! number of cloud microphysical tracers
  integer, public    :: QS_MP = -1 ! start index in QTRC
  integer, public    :: QE_MP = -1 ! end   index in QTRC

  character(len=H_SHORT), pointer, public :: ATMOS_PHY_MP_NAME(:)
  character(len=H_MID),   pointer, public :: ATMOS_PHY_MP_DESC(:)
  character(len=H_SHORT), pointer, public :: ATMOS_PHY_MP_UNIT(:)
  real(RP), pointer, public :: ATMOS_PHY_MP_DENS(:)
  !-----------------------------------------------------------------------------
  !
  !++ Private procedure
  !
  !-----------------------------------------------------------------------------
  !
  !++ Private parameters & variables
  !
  !-----------------------------------------------------------------------------
contains
  !-----------------------------------------------------------------------------
  !> Setup Cloud Microphysics
  !-----------------------------------------------------------------------------
  subroutine ATMOS_PHY_MP_config( MP_TYPE )
    use scale_process, only: &
       PRC_MPIstop
% types.each do |type|
    use scale_atmos_phy_mp_<%=type%>, only: &
       ATMOS_PHY_MP_<%=type%>_config, &
       ATMOS_PHY_MP_<%=type%>_setup, &
       ATMOS_PHY_MP_<%=type%>, &
       ATMOS_PHY_MP_<%=type%>_CloudFraction, &
       ATMOS_PHY_MP_<%=type%>_EffectiveRadius, &
       ATMOS_PHY_MP_<%=type%>_MixingRatio, &
       ATMOS_PHY_MP_<%=type%>_NAME, &
       ATMOS_PHY_MP_<%=type%>_DESC, &
       ATMOS_PHY_MP_<%=type%>_UNIT, &
       ATMOS_PHY_MP_<%=type%>_DENS
% end
    implicit none

    character(len=*), intent(in) :: MP_TYPE
    !---------------------------------------------------------------------------

    if( IO_L ) write(IO_FID_LOG,*) '*** => ', trim(MP_TYPE), ' is selected.'

    select case( MP_TYPE )
% types.each do |type|
    case( '<%=type.upcase%>' )
       call ATMOS_PHY_MP_<%=type%>_config( &
            MP_TYPE,     & ! (in)
            QA_MP, QS_MP ) ! (out)
       ATMOS_PHY_MP                 => ATMOS_PHY_MP_<%=type%>
       ATMOS_PHY_MP_setup           => ATMOS_PHY_MP_<%=type%>_setup
       ATMOS_PHY_MP_CloudFraction   => ATMOS_PHY_MP_<%=type%>_CloudFraction
       ATMOS_PHY_MP_EffectiveRadius => ATMOS_PHY_MP_<%=type%>_EffectiveRadius
       ATMOS_PHY_MP_MixingRatio     => ATMOS_PHY_MP_<%=type%>_MixingRatio
       ATMOS_PHY_MP_NAME            => ATMOS_PHY_MP_<%=type%>_NAME
       ATMOS_PHY_MP_DESC            => ATMOS_PHY_MP_<%=type%>_DESC
       ATMOS_PHY_MP_UNIT            => ATMOS_PHY_MP_<%=type%>_UNIT
       ATMOS_PHY_MP_DENS            => ATMOS_PHY_MP_<%=type%>_DENS
% end
    end select

    QE_MP = QS_MP + QA_MP - 1

    return
  end subroutine ATMOS_PHY_MP_config

end module scale_atmos_phy_mp
