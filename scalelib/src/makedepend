#!/usr/bin/env ruby

def usage
  print "Usage: ruby #$0 srcdir\n"
  exit(-1)
end

srcdir = ARGV.shift || usage

deps = Hash.new
pros = Hash.new


SUFFIX = ".F90"

def parse(deps, pros, srcdir, dir=".")
  dirs = Dir[ File.join(srcdir, dir, "*") ]
  dirs.each do |fdir|
    next unless File.directory?(fdir)
    next if (/(obsolete)/ =~ fdir)
    fdir = fdir.sub(/#{srcdir}\//,"")
    next if /\.\Z/ =~ fdir
    parse(deps, pros, srcdir, fdir)
  end
  files = Dir[ File.join(srcdir, dir, "*#{SUFFIX}") ]
  files.each do |file|
    basename = File.basename(file, SUFFIX)
    dep = {
      :dir => dir,
      :depends => Array.new
    }
    pro = {
      :dir => dir,
      :file => basename
    }
    deps[basename] = dep
    File.foreach(file) do |line|
      case line
      when /^\s*module (\w+)/
        mod = $1
        next if /procedure/ =~ mod
        pros[mod] = pro
      when /^\s*use (\w+)/
        mod = $1
        next if (/(iso_c_binding|mpi|MPI|netcdf|gadg|rng|mt|NAME)/ =~ mod)
        # JMA pp library
        next if /pbl_(const|coupler|grid|parm|diag|mym_const|mym_option|mym_parm|mym_main)/ =~ mod
        next if /conv_(grid|kf_const|kf_parm|kf_main|kf_lut)/ =~ mod

        dep[:depends].push(mod) unless dep[:depends].include?(mod)
      end
    end
  end
end

parse(deps, pros, srcdir)

File.open( File.join(srcdir, "depend"), "w" ) do |file|
  deps.sort.each do |name, dep|
    file.print "$(BUILD_DIR)/#{name}.o: #{dep[:dir]}/#{name}.F90 $(DEPENDLIB)"

    dep[:depends].sort.each do |mod|
      if pro = pros[mod]
        file.print " $(BUILD_DIR)/#{pro[:file]}.o"
      else
        $stderr.print "Module '#{mod}' is used in '#{name}', but it is not found.\n"
        raise "ERROR"
      end
    end
    file.print "\n"
  end
  file.print "\n"
end
