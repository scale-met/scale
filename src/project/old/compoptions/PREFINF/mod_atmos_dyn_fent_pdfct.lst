
 Fujitsu Fortran Version 1.2.0  Wed Feb  1 19:27:16 2012

 Compilation information
   Current directory : /home/user0171/scale3/src/project/compoptions
   Source file       : mod_atmos_dyn_fent_pdfct.f90

 Option information
   Command line options : -Kident_mpi=1.2.0 -f2004 -Kvisimpact,prefetch_cache_level=all,auto,openmp,array_private,ilfunc,ocl,mfunc=2,preex,noalias=s,parallel_compress,parallel_strong -Ntl_trt -Qt -V -v03s -Ksimd -Cpp -D_FPCOLL_ -Kprefetch_infer,prefetch_strong_L2,prefetch_iteration_L2=50 -o mod_atmos_dyn_fent_pdfct.o -c -I/opt/FJSVtclang/GM-1.2.0-02/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-02/lib64
   Cpp options          : -V -D_FPCOLL_ -I/opt/FJSVtclang/GM-1.2.0-02/include/mpi/fujitsu -I/opt/FJSVtclang/GM-1.2.0-02/lib64 -D__FUJITSU -Dunix -Dsparc -D__sparc__ -D__unix -D__sparc -D_OPENMP=200805 -D__frt_version=600 -D__HPC_ACE__ -D__ELF__ -D__unix__ -D__linux__ -D__linux -Asystem(unix) -Dlinux -D__sparcv9 -D__sparc_v9__ -D__arch64__
   Effective options    : -fi -v03s -AE -Free -O3 -Qp,t -X9
                          -x0
                          -KFLTLD -Kadr44 -Knoalias=s -Kauto -Knoautoobjstack
                          -Knocalleralloc -Kdalign -Keval -Knofenv_access
                          -Kfp_contract -Kfp_relaxed -Kfsimple -Kilfunc
                          -Klargepage -Kloop_blocking -Kloop_fission
                          -Kloop_fusion -Kloop_interchange -Kns -Kmfunc=2
                          -Kocl -Koptmsg=1 -Kpreex -Kprefetch_conditional
                          -Kprefetch_noindirect -Kprefetch_sequential=auto
                          -Kprefetch_nostride -Kprefetch_cache_level=all
                          -Kprefetch_infer -Kprefetch_iteration_L2=50
                          -Kprefetch_nostrong -Kprefetch_strong_L2 -Ksimd=1
                          -Knostriping -Kswp -Knotemparraystack -Kunroll
                          -Knouxsimd -KNOXFILL
                          -Kopenmp -Kthreadsafe -Kparallel_strong
                          -Karray_private -Knodynamic_iteration -Kreduction
                          -Kregion_extension
                          -Nallextput -Nnocompdisp -Nnocopyarg -Nfreealloc
                          -Nf90move -Nnohook_func -Nnohook_time -Nline
                          -Nnomallocfree -Nnoobsfun -Nnoprivatealloc
                          -Nquickdbg=noargchk -Nquickdbg=nosubchk
                          -Nquickdbg=noundef -NRnotrap -Nnorecursive
                          -Nrt_notune -Nnosave -Nuse_rodata

 Module "mod_atmos_dyn"
  (line-no.)(nest)(optimize)
          1                     !-------------------------------------------------------------------------------
          2                     !> module Atmosphere / Dynamics FENT + FCT
          3                     !!
          4                     !! @par Description
          5                     !!          Dynamical core for Atmospheric process
          6                     !!          Full explicit, no terrain + tracer FCT limiter
          7                     !!
          8                     !! @author H.Tomita and SCALE developpers
          9                     !!
         10                     !! @par History
         11                     !! @li      2011-11-11 (H.Yashiro)  [new] Imported from SCALE-LES ver.2
         12                     !! @li      2011-11-11 (H.Yashiro)  [mod] Merged with Y.Miyamoto's
         13                     !! @li      2011-12-11 (H.Yashiro)  [mod] Use reference state
         14                     !! @li      2011-12-26 (Y.Miyamoto) [mod] Add numerical diffusion into mass flux calc
         15                     !! @li      2011-01-04 (H.Yashiro)  [mod] Nonblocking communication (Y.Ohno)
         16                     !! @li      2011-01-25 (H.Yashiro)  [mod] Bugfix (Y.Miyamoto)
         17                     !! @li      2011-01-25 (H.Yashiro)  [mod] Positive definite FCT (Y.Miyamoto)
         18                     !!
         19                     !<
         20                     !-------------------------------------------------------------------------------
         21                     module mod_atmos_dyn
         22                       !-----------------------------------------------------------------------------
         23                       !
         24                       !++ used modules
         25                       !
         26                       !-----------------------------------------------------------------------------
         27                       implicit none
         28                       private
         29                       !-----------------------------------------------------------------------------
         30                       !
         31                       !++ Public procedure
         32                       !
         33                       public :: ATMOS_DYN_setup
         34                       public :: ATMOS_DYN
         35                       !-----------------------------------------------------------------------------
         36                       !
         37                       !++ Public parameters & variables
         38                       !
         39                       !-----------------------------------------------------------------------------
         40                       !
         41                       !++ Private procedure
         42                       !
         43                       !-----------------------------------------------------------------------------
         44                       !
         45                       !++ Private parameters & variables
         46                       !
         47                       integer, parameter :: I_PRES = 1
         48                       integer, parameter :: I_VELX = 2
         49                       integer, parameter :: I_VELY = 3
         50                       integer, parameter :: I_VELZ = 4
         51                       integer, parameter :: I_POTT = 5
         52                     
         53                       integer, parameter :: ZDIR   = 1
         54                       integer, parameter :: XDIR   = 2
         55                       integer, parameter :: YDIR   = 3
         56                     
         57                       ! time settings
         58                       integer, parameter :: RK = 3 ! order of Runge-Kutta scheme
         59                     
         60                       ! advection settings
         61                       real(8), parameter :: FACT_N =   7.D0 / 6.D0 !  7/6: fourth, 1: second
         62                       real(8), parameter :: FACT_F = - 1.D0 / 6.D0 ! -1/6: fourth, 0: second
         63                     
         64                       ! numerical filter settings
         65                       real(8), save      :: ATMOS_DYN_numerical_diff = 1.D-2 ! nondimensional numerical diffusion
         66                       real(8), save      :: DIFF4 ! for 4th order numerical filter
         67                       real(8), save      :: DIFF2 ! for 2nd order numerical filter
         68                     
         69                       real(8), allocatable, save :: CNDZ(:,:)
         70                       real(8), allocatable, save :: CNMZ(:,:)
         71                       real(8), allocatable, save :: CNDX(:,:)
         72                       real(8), allocatable, save :: CNMX(:,:)
         73                       real(8), allocatable, save :: CNDY(:,:)
         74                       real(8), allocatable, save :: CNMY(:,:)
         75                     
         76                       !-----------------------------------------------------------------------------
         77                     contains
         78                     
         79                       !-----------------------------------------------------------------------------
         80                       !> Initialize Dynamical Process
         81                       !-----------------------------------------------------------------------------
         82                       subroutine ATMOS_DYN_setup
         83                         use mod_stdio, only: &
         84                            IO_FID_CONF, &
         85                            IO_FID_LOG,  &
         86                            IO_L
         87                         use mod_process, only: &
         88                            PRC_MPIstop
         89                         use mod_grid, only : &
         90                            IA  => GRID_IA, &
         91                            JA  => GRID_JA, &
         92                            KA  => GRID_KA, &
         93                            IS  => GRID_IS, &
         94                            IE  => GRID_IE, &
         95                            JS  => GRID_JS, &
         96                            JE  => GRID_JE, &
         97                            KS  => GRID_KS, &
         98                            KE  => GRID_KE, &
         99                            CDX => GRID_CDX, &
        100                            CDY => GRID_CDY, &
        101                            CDZ => GRID_CDZ
        102                         implicit none
        103                     
        104                         NAMELIST / PARAM_ATMOS_DYN / &
        105                            ATMOS_DYN_numerical_diff
        106                     
        107                         integer :: ierr
        108                         integer :: i, j, k
        109                         !---------------------------------------------------------------------------
        110                     
        111                         if( IO_L ) write(IO_FID_LOG,*)
        112                         if( IO_L ) write(IO_FID_LOG,*) '+++ Module[Dynamics]/Categ[ATMOS]'
        113                     
        114                         !--- read namelist
        115                         rewind(IO_FID_CONF)
        116                         read(IO_FID_CONF,nml=PARAM_ATMOS_DYN,iostat=ierr)
        117                     
        118     1                   if( ierr < 0 ) then !--- missing
        119     1                      if( IO_L ) write(IO_FID_LOG,*) '*** Not found namelist. Default used.'
        120     1                   elseif( ierr > 0 ) then !--- fatal error
        121     1                      write(*,*) 'xxx Not appropriate names in namelist PARAM_ATMOS_DYN. Check!'
        122     1                      call PRC_MPIstop
        123     1                   endif
        124                         if( IO_L ) write(IO_FID_LOG,nml=PARAM_ATMOS_DYN)
        125                     
        126                         DIFF4 = - ATMOS_DYN_numerical_diff * (-1.D0)**dble( 4/2+1 )
        127                         DIFF2 = - ATMOS_DYN_numerical_diff * (-1.D0)**dble( 2/2+1 )
        128                     
        129                         allocate( CNDX(3,IA) )
        130                         allocate( CNMX(3,IA) )
        131                         allocate( CNDY(3,JA) )
        132                         allocate( CNMY(3,JA) )
        133                         allocate( CNDZ(3,KA) )
        134                         allocate( CNMZ(3,KA) )
        135                     
        136                         ! z djrectjon
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        137     1  pp   2v          do k = KS-1, KE+1
        138     1   p   2v             CNDZ(1,k) = 1.D0 / ( (CDZ(k+1)+CDZ(k  )) * 0.5D0 * CDZ(k  ) * (CDZ(k  )+CDZ(k-1)) * 0.5D0 )
        139     1   p   2v             CNDZ(2,k) = 1.D0 / ( (CDZ(k+1)+CDZ(k  )) * 0.5D0 * CDZ(k  ) * (CDZ(k  )+CDZ(k-1)) * 0.5D0 ) &
        140     1                                + 1.D0 / ( (CDZ(k  )+CDZ(k-1)) * 0.5D0 * CDZ(k  ) * (CDZ(k  )+CDZ(k-1)) * 0.5D0 ) &
        141     1                                + 1.D0 / ( (CDZ(k  )+CDZ(k-1)) * 0.5D0 * CDZ(k-1) * (CDZ(k  )+CDZ(k-1)) * 0.5D0 )
        142     1   p   2v          enddo
        143                         CNDZ(1,1)  = CNDZ(1,KS-1)
        144                         CNDZ(2,1)  = CNDZ(2,KS-1)
        145                         CNDZ(1,KA) = CNDZ(1,KE+1)
        146                         CNDZ(2,KA) = CNDZ(2,KE+1)
        147                     
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        148     1  pp   2v          do k = KS, KE+2
        149     1   p   2v             CNDZ(3,k) = 1.D0 / ( (CDZ(k  )+CDZ(k-1)) * 0.5D0 * CDZ(k  ) * (CDZ(k  )+CDZ(k-1)) * 0.5D0 ) &
        150     1                                + 1.D0 / ( (CDZ(k  )+CDZ(k-1)) * 0.5D0 * CDZ(k-1) * (CDZ(k  )+CDZ(k-1)) * 0.5D0 ) &
        151     1                                + 1.D0 / ( (CDZ(k  )+CDZ(k-1)) * 0.5D0 * CDZ(k-1) * (CDZ(k-1)+CDZ(k-2)) * 0.5D0 )
        152     1   p   2v          enddo
        153                         CNDZ(3,1)    = CNDZ(3,KS)
        154                         CNDZ(3,KS-1) = CNDZ(3,KS)
        155                     
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        156     1  pp   4v          do k = KS-2, KE+1
        157     1   p   4v             CNMZ(1,k) = 1.D0 / ( CDZ(k+1) * (CDZ(k+1)+CDZ(k  )) * 0.5D0 * CDZ(k  ) )
        158     1   p   4v          enddo
        159                         CNMZ(1,KA) = CNMZ(1,KE+1)
        160                     
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        161     1  pp   2v          do k = KS-1, KE+1
        162     1   p   2v             CNMZ(2,k) = 1.D0 / ( CDZ(k+1) * (CDZ(k+1)+CDZ(k  )) * 0.5D0 * CDZ(k  ) ) &
        163     1                                + 1.D0 / ( CDZ(k  ) * (CDZ(k+1)+CDZ(k  )) * 0.5D0 * CDZ(k  ) ) &
        164     1                                + 1.D0 / ( CDZ(k  ) * (CDZ(k  )+CDZ(k-1)) * 0.5D0 * CDZ(k  ) )
        165     1   p   2v             CNMZ(3,k) = 1.D0 / ( CDZ(k  ) * (CDZ(k+1)+CDZ(k  )) * 0.5D0 * CDZ(k  ) ) &
        166     1                                + 1.D0 / ( CDZ(k  ) * (CDZ(k  )+CDZ(k-1)) * 0.5D0 * CDZ(k  ) ) &
        167     1                                + 1.D0 / ( CDZ(k  ) * (CDZ(k  )+CDZ(k-1)) * 0.5D0 * CDZ(k-1) )
        168     1   p   2v          enddo
        169                         CNMZ(2,1)  = CNMZ(2,KS-1)
        170                         CNMZ(3,1)  = CNMZ(3,KS-1)
        171                         CNMZ(2,KA) = CNMZ(2,KE+1)
        172                         CNMZ(3,KA) = CNMZ(3,KE+1)
        173                     
        174                         ! x direction
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        175     1  pp   2v          do i = IS-1, IE+1
        176     1   p   2v             CNDX(1,i) = 1.D0 / ( (CDX(i+1)+CDX(i  )) * 0.5D0 * CDX(i  ) * (CDX(i  )+CDX(i-1)) * 0.5D0 )
        177     1   p   2v             CNDX(2,i) = 1.D0 / ( (CDX(i+1)+CDX(i  )) * 0.5D0 * CDX(i  ) * (CDX(i  )+CDX(i-1)) * 0.5D0 ) &
        178     1                                + 1.D0 / ( (CDX(i  )+CDX(i-1)) * 0.5D0 * CDX(i  ) * (CDX(i  )+CDX(i-1)) * 0.5D0 ) &
        179     1                                + 1.D0 / ( (CDX(i  )+CDX(i-1)) * 0.5D0 * CDX(i-1) * (CDX(i  )+CDX(i-1)) * 0.5D0 )
        180     1   p   2v          enddo
        181                         CNDX(1,1)  = CNDX(1,IS-1)
        182                         CNDX(2,1)  = CNDX(2,IS-1)
        183                         CNDX(1,IA) = CNDX(1,IE+1)
        184                         CNDX(2,IA) = CNDX(2,IE+1)
        185                     
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        186     1  pp   2v          do i = IS, IE+2
        187     1   p   2v             CNDX(3,i) = 1.D0 / ( (CDX(i  )+CDX(i-1)) * 0.5D0 * CDX(i  ) * (CDX(i  )+CDX(i-1)) * 0.5D0 ) &
        188     1                                + 1.D0 / ( (CDX(i  )+CDX(i-1)) * 0.5D0 * CDX(i-1) * (CDX(i  )+CDX(i-1)) * 0.5D0 ) &
        189     1                                + 1.D0 / ( (CDX(i  )+CDX(i-1)) * 0.5D0 * CDX(i-1) * (CDX(i-1)+CDX(i-2)) * 0.5D0 )
        190     1   p   2v          enddo
        191                         CNDX(3,1)    = CNDX(3,IS)
        192                         CNDX(3,IS-1) = CNDX(3,IS)
        193                     
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        194     1  pp   4v          do i = IS-2, IE+1
        195     1   p   4v             CNMX(1,i) = 1.D0 / ( CDX(i+1) * (CDX(i+1)+CDX(i  )) * 0.5D0 * CDX(i  ) )
        196     1   p   4v          enddo
        197                         CNMX(1,IA) = CNMX(1,IE+1)
        198                     
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        199     1  pp   2v          do i = IS-1, IE+1
        200     1   p   2v             CNMX(2,i) = 1.D0 / ( CDX(i+1) * (CDX(i+1)+CDX(i  )) * 0.5D0 * CDX(i  ) ) &
        201     1                                + 1.D0 / ( CDX(i  ) * (CDX(i+1)+CDX(i  )) * 0.5D0 * CDX(i  ) ) &
        202     1                                + 1.D0 / ( CDX(i  ) * (CDX(i  )+CDX(i-1)) * 0.5D0 * CDX(i  ) )
        203     1   p   2v             CNMX(3,i) = 1.D0 / ( CDX(i  ) * (CDX(i+1)+CDX(i  )) * 0.5D0 * CDX(i  ) ) &
        204     1                                + 1.D0 / ( CDX(i  ) * (CDX(i  )+CDX(i-1)) * 0.5D0 * CDX(i  ) ) &
        205     1                                + 1.D0 / ( CDX(i  ) * (CDX(i  )+CDX(i-1)) * 0.5D0 * CDX(i-1) )
        206     1   p   2v          enddo
        207                         CNMX(2,1)  = CNMX(2,IS-1)
        208                         CNMX(3,1)  = CNMX(3,IS-1)
        209                         CNMX(2,IA) = CNMX(2,IE+1)
        210                         CNMX(3,IA) = CNMX(3,IE+1)
        211                     
        212                         ! y direction
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        213     1  pp   2v          do j = JS-1, JE+1
        214     1   p   2v             CNDY(1,j) = 1.D0 / ( (CDY(j+1)+CDY(j  )) * 0.5D0 * CDY(j  ) * (CDY(j  )+CDY(j-1)) * 0.5D0 )
        215     1   p   2v             CNDY(2,j) = 1.D0 / ( (CDY(j+1)+CDY(j  )) * 0.5D0 * CDY(j  ) * (CDY(j  )+CDY(j-1)) * 0.5D0 ) &
        216     1                                + 1.D0 / ( (CDY(j  )+CDY(j-1)) * 0.5D0 * CDY(j  ) * (CDY(j  )+CDY(j-1)) * 0.5D0 ) &
        217     1                                + 1.D0 / ( (CDY(j  )+CDY(j-1)) * 0.5D0 * CDY(j-1) * (CDY(j  )+CDY(j-1)) * 0.5D0 )
        218     1   p   2v          enddo
        219                         CNDY(1,1)  = CNDY(1,JS-1)
        220                         CNDY(2,1)  = CNDY(2,JS-1)
        221                         CNDY(1,JA) = CNDY(1,JE+1)
        222                         CNDY(2,JA) = CNDY(2,JE+1)
        223                     
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        224     1  pp   2v          do j = JS, JE+2
        225     1   p   2v             CNDY(3,j) = 1.D0 / ( (CDY(j  )+CDY(j-1)) * 0.5D0 * CDY(j  ) * (CDY(j  )+CDY(j-1)) * 0.5D0 ) &
        226     1                                + 1.D0 / ( (CDY(j  )+CDY(j-1)) * 0.5D0 * CDY(j-1) * (CDY(j  )+CDY(j-1)) * 0.5D0 ) &
        227     1                                + 1.D0 / ( (CDY(j  )+CDY(j-1)) * 0.5D0 * CDY(j-1) * (CDY(j-1)+CDY(j-2)) * 0.5D0 )
        228     1   p   2v          enddo
        229                         CNDY(3,1)    = CNDY(3,JS)
        230                         CNDY(3,JS-1) = CNDY(3,JS)
        231                     
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        232     1  pp   4v          do j = JS-2, JE+1
        233     1   p   4v             CNMY(1,j) = 1.D0 / ( CDY(j+1) * (CDY(j+1)+CDY(j  )) * 0.5D0 * CDY(j  ) )
        234     1   p   4v          enddo
        235                         CNMY(1,JA) = CNMY(1,JE+1)
        236                     
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        237     1  pp   2v          do j = JS-1, JE+1
        238     1   p   2v             CNMY(2,j) = 1.D0 / ( CDY(j+1) * (CDY(j+1)+CDY(j  )) * 0.5D0 * CDY(j  ) ) &
        239     1                                + 1.D0 / ( CDY(j  ) * (CDY(j+1)+CDY(j  )) * 0.5D0 * CDY(j  ) ) &
        240     1                                + 1.D0 / ( CDY(j  ) * (CDY(j  )+CDY(j-1)) * 0.5D0 * CDY(j  ) )
        241     1   p   2v             CNMY(3,j) = 1.D0 / ( CDY(j  ) * (CDY(j+1)+CDY(j  )) * 0.5D0 * CDY(j  ) ) &
        242     1                                + 1.D0 / ( CDY(j  ) * (CDY(j  )+CDY(j-1)) * 0.5D0 * CDY(j  ) ) &
        243     1                                + 1.D0 / ( CDY(j  ) * (CDY(j  )+CDY(j-1)) * 0.5D0 * CDY(j-1) )
        244     1   p   2v          enddo
        245                         CNMY(2,1)  = CNMY(2,JS-1)
        246                         CNMY(3,1)  = CNMY(3,JS-1)
        247                         CNMY(2,JA) = CNMY(2,JE+1)
        248                         CNMY(3,JA) = CNMY(3,JE+1)
        249                     
        250                       end subroutine ATMOS_DYN_setup
        251                     
        252                       !-----------------------------------------------------------------------------
        253                       !> Dynamical Process
        254                       !-----------------------------------------------------------------------------
        255                       subroutine ATMOS_DYN
        256                         use mod_stdio, only: &
        257                            IO_FID_LOG,  &
        258                            IO_L
        259                         use mod_const, only : &
        260                            GRAV   => CONST_GRAV,   &
        261                            Rdry   => CONST_Rdry,   &
        262                            CPovCV => CONST_CPovCV, &
        263                            Pstd   => CONST_Pstd
        264                         use mod_time, only: &
        265                            TIME_DTSEC_ATMOS_DYN, &
        266                            TIME_NSTEP_ATMOS_DYN
        267                         use mod_comm, only: &
        268                            COMM_vars, &
        269                            COMM_wait, &
        270                            COMM_total
        271                         use mod_grid, only : &
        272                            IA   => GRID_IA,   &
        273                            JA   => GRID_JA,   &
        274                            KA   => GRID_KA,   &
        275                            IS   => GRID_IS,   &
        276                            IE   => GRID_IE,   &
        277                            JS   => GRID_JS,   &
        278                            JE   => GRID_JE,   &
        279                            KS   => GRID_KS,   &
        280                            KE   => GRID_KE,   &
        281                            CDX  => GRID_CDX,  &
        282                            CDY  => GRID_CDY,  &
        283                            CDZ  => GRID_CDZ,  &
        284                            RDXC => GRID_RCDX, &
        285                            RDYC => GRID_RCDY, &
        286                            RDZC => GRID_RCDZ, &
        287                            RDXF => GRID_RFDX, &
        288                            RDYF => GRID_RFDY, &
        289                            RDZF => GRID_RFDZ
        290                         use mod_atmos_vars, only: &
        291                            var => atmos_var, &
        292                            A_NAME,      &
        293                            VA  => A_VA, &
        294                            QA  => A_QA, &
        295                            I_DENS,      &
        296                            I_MOMX,      &
        297                            I_MOMY,      &
        298                            I_MOMZ,      &
        299                            I_RHOT
        300                         use mod_atmos_refstate, only: &
        301                            REF_dens => ATMOS_REFSTATE_dens, &
        302                            REF_pott => ATMOS_REFSTATE_pott
        303                         use mod_atmos_boundary, only: &
        304                            DAMP_var   => ATMOS_BOUNDARY_var,   &
        305                            DAMP_alpha => ATMOS_BOUNDARY_alpha, &
        306                            I_BND_VELZ,  &
        307                            I_BND_VELX,  &
        308                            I_BND_VELY,  &
        309                            I_BND_POTT
        310                         implicit none
        311                     
        312                         ! work
        313                         real(8) :: var_s    (KA,IA,JA,5)   ! prognostic variables (previous step)
        314                         real(8) :: var_temp
        315                         real(8) :: diagvar  (KA,IA,JA,5)   ! diagnostic variables (work)
        316                     
        317                         ! rayleigh damping, numerical diffusion
        318                         real(8) :: dens_diff(KA,IA,JA)     ! anomary of density
        319                         real(8) :: pott_diff(KA,IA,JA)     ! anomary of rho * pott
        320                         real(8) :: ray_damp (KA,IA,JA,5)
        321                         real(8) :: num_diff (KA,IA,JA,5,3)
        322                     
        323                         ! mass flux
        324                         real(8) :: mflx_hi  (KA,IA,JA,3)   ! rho * vel(x,y,z) @ (u,v,w)-face high order
        325                         real(8) :: qflx_hi  (KA,IA,JA,3)   ! rho * vel(x,y,z) * phi @ (u,v,w)-face high order
        326                     
        327                         ! For FCT
        328                         real(8) :: qflx_lo  (KA,IA,JA,3)   ! rho * vel(x,y,z) * phi @ (u,v,w)-face low  order
        329                         real(8) :: qflx_anti(KA,IA,JA,3)   ! rho * vel(x,y,z) * phi @ (u,v,w)-face antidiffusive
        330                         real(8) :: rjmns    (KA,IA,JA,3)   ! minus in (x,y,z)-direction
        331                         real(8) :: pjmns
        332                     
        333                         real(8) :: dtrk, rdtrk
        334                         integer :: i, j, k, iq, iv, rko, step
        335                         !---------------------------------------------------------------------------
        336                     
        337                     #ifdef _FPCOLL_
        338                     call START_COLLECTION("DYNAMICS")
        339                     #endif
        340                     
        341     1                   do step = 1, TIME_NSTEP_ATMOS_DYN
        342     1               
        343     1               !    diagvar  (:,:,:,:)   = -9.999D30
        344     1               !    dens_diff(:,:,:)     = -9.999D30
        345     1               !    pott_diff(:,:,:)     = -9.999D30
        346     1               !    ray_damp (:,:,:,:)   = -9.999D30
        347     1               !    num_diff (:,:,:,:,:) = -9.999D30
        348     1               !    mflx_hi  (:,:,:,:)   = -9.999D30
        349     1               !    qflx_hi  (:,:,:,:)   = -9.999D30
        350     1               !    qflx_lo  (:,:,:,:)   = -9.999D30
        351     1               !    qflx_anti(:,:,:,:)   = -9.999D30
        352     1               
        353     1                   if( IO_L ) write(IO_FID_LOG,*) '*** Dynamical small step:', step
        354     1               
        355     1               #ifdef _FPCOLL_
        356     1               call START_COLLECTION("SET")
        357     1               #endif
        358     1               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        359     2  pp               do j  = 1, JA
        360     3   p               do i  = 1, IA
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        361     4   p   6v          do k  = 1, KA
        362     4   p   6v             var_s(k,i,j,1) = var(k,i,j,1)
        363     4   p   6v             var_s(k,i,j,2) = var(k,i,j,2)
        364     4   p   6v             var_s(k,i,j,3) = var(k,i,j,3)
        365     4   p   6v             var_s(k,i,j,4) = var(k,i,j,4)
        366     4   p   6v             var_s(k,i,j,5) = var(k,i,j,5)
        367     4   p   6v          enddo
        368     3   p               enddo
        369     2   p               enddo
        370     1               
        371     1                   !--- prepare rayleigh damping coefficient
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        372     2  pp               do j = JS, JE
        373     3   p               do i = IS, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        374     4   p   6v             do k = KS, KE-1
        375     4   p   6v                ray_damp(k,i,j,I_MOMZ) = - DAMP_alpha(k,i,j,I_BND_VELZ) &
        376     4                                                  * ( var(k,i,j,I_MOMZ)          &
        377     4                                                    - DAMP_var(k,i,j,I_BND_VELZ) &
        378     4                                                    * 0.5D0 * ( var(k+1,i,j,I_DENS)+var(k,i,j,I_DENS) ) )
        379     4   p   6v             enddo
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        380     4   p   4v             do k = KS, KE
        381     4   p   4v                ray_damp(k,i,j,I_MOMX) = - DAMP_alpha(k,i,j,I_BND_VELX) &
        382     4                                             * ( var(k,i,j,I_MOMX) &
        383     4                                               - DAMP_var(k,i,j,I_BND_VELX) * 0.5D0 * ( var(k,i+1,j,I_DENS)+var(k,i,j,I_DENS) ) )
        384     4   p   4v                ray_damp(k,i,j,I_MOMY) = - DAMP_alpha(k,i,j,I_BND_VELY) &
        385     4                                             * ( var(k,i,j,I_MOMY) &
        386     4                                               - DAMP_var(k,i,j,I_BND_VELY) * 0.5D0 * ( var(k,i,j+1,I_DENS)+var(k,i,j,I_DENS) ) )
        387     4   p   4v                ray_damp(k,i,j,I_RHOT) = - DAMP_alpha(k,i,j,I_BND_POTT) &
        388     4                                             * ( var(k,i,j,I_RHOT) &
        389     4                                               - DAMP_var(k,i,j,I_BND_POTT) * var(k,i,j,I_DENS) )
        390     4   p   4v             enddo
        391     3   p               enddo
        392     2   p               enddo
        393     1               
        394     1                   !--- prepare numerical diffusion coefficient
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        395     2  pp               do j  = 1, JA
        396     3   p               do i  = 1, IA
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        397     4   p   4v             do k = KS, KE
        398     4   p   4v                dens_diff(k,i,j) = var(k,i,j,I_DENS)                     - REF_dens(k)
        399     4   p   4v                pott_diff(k,i,j) = var(k,i,j,I_RHOT) / var(k,i,j,I_DENS) - REF_pott(k)
        400     4   p   4v             enddo
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<< Loop-information  End >>>
        401     4   p   8v             do k = 1, KS-1
        402     4   p   8v                dens_diff(k,i,j) = dens_diff(KS,i,j)
        403     4   p   8v                pott_diff(k,i,j) = pott_diff(KS,i,j)
        404     4   p   8v             enddo
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<< Loop-information  End >>>
        405     4   p   8v             do k = KE+1, KA
        406     4   p   8v                dens_diff(k,i,j) = dens_diff(KE,i,j)
        407     4   p   8v                pott_diff(k,i,j) = pott_diff(KE,i,j)
        408     4   p   8v             enddo
        409     3   p               enddo
        410     2   p               enddo
        411     1               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        412     2  pp               do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 44
                              <<<      dens_diff: 12, var: 12, pott_diff: 12
                              <<<      CNDZ: 8
                              <<< Loop-information  End >>>
        413     3   p               do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        414     4   p   2v          do k = KS+1, KE-2
        415     4   p   2v             num_diff(k,i,j,I_DENS,ZDIR) = DIFF4 * CDZ(k)**4                  &
        416     4                                                  * ( CNDZ(1,k+1) * dens_diff(k+2,i,j) &
        417     4                                                    - CNDZ(2,k+1) * dens_diff(k+1,i,j) &
        418     4                                                    + CNDZ(3,k+1) * dens_diff(k  ,i,j) &
        419     4                                                    - CNDZ(1,k  ) * dens_diff(k-1,i,j) )
        420     4               
        421     4   p   2v             num_diff(k,i,j,I_RHOT,ZDIR) = DIFF4 * CDZ(k)**4                    &
        422     4                                                  * ( CNDZ(1,k+1) * pott_diff(k+2,i,j)   &
        423     4                                                    - CNDZ(2,k+1) * pott_diff(k+1,i,j)   &
        424     4                                                    + CNDZ(3,k+1) * pott_diff(k  ,i,j)   &
        425     4                                                    - CNDZ(1,k  ) * pott_diff(k-1,i,j) ) &
        426     4                                                  * 0.5D0 * ( FACT_N * ( var(k+1,i,j,I_DENS)+var(k  ,i,j,I_DENS) ) &
        427     4                                                            + FACT_F * ( var(k+2,i,j,I_DENS)+var(k-1,i,j,I_DENS) ) )
        428     4   p   2v          enddo
        429     3   p               enddo
        430     2   p               enddo
        431     1               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        432     2  pp               do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        433     3   p    v          do i = IS,   IE
        434     3   p    v             num_diff(KS  ,i,j,I_DENS,ZDIR) = DIFF2 * CDZ(KS)                                 &
        435     3                                                     * 4.0D0 * ( dens_diff(KS+1,i,j)-dens_diff(KS,i,j) )
        436     3               
        437     3   p    v             num_diff(KS  ,i,j,I_RHOT,ZDIR) = DIFF2 * CDZ(KS)                                   &
        438     3                                                     * 4.0D0 * ( pott_diff(KS+1,i,j)-pott_diff(KS,i,j) ) &
        439     3                                                     * 0.5D0 * ( var(KS+1,i,j,I_DENS)+var(KS,i,j,I_DENS) )
        440     3               
        441     3   p    v             num_diff(KE-1,i,j,I_DENS,ZDIR) = DIFF2 * CDZ(KE-1)                               &
        442     3                                                     * 4.0D0 * ( dens_diff(KE,i,j)-dens_diff(KE-1,i,j) )
        443     3               
        444     3   p    v             num_diff(KE-1,i,j,I_RHOT,ZDIR) = DIFF2 * CDZ(KE-1)                                 &
        445     3                                                     * 4.0D0 * ( pott_diff(KE,i,j)-pott_diff(KE-1,i,j) ) &
        446     3                                                     * 0.5D0 * ( var(KE,i,j,I_DENS)+var(KE-1,i,j,I_DENS) )
        447     3   p    v          enddo
        448     2   p               enddo
        449     1               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        450     2  pp               do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 4
                              <<<      CDX: 4
                              <<< Loop-information  End >>>
        451     3   p               do i = IS-1, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        452     4   p   4v          do k = KS,   KE
        453     4   p   4v             num_diff(k,i,j,I_DENS,XDIR) = DIFF4 * CDX(i)**4                  &
        454     4                                                  * ( CNDX(1,i+1) * dens_diff(k,i+2,j) &
        455     4                                                    - CNDX(2,i+1) * dens_diff(k,i+1,j) &
        456     4                                                    + CNDX(3,i+1) * dens_diff(k,i  ,j) &
        457     4                                                    - CNDX(1,i  ) * dens_diff(k,i-1,j) )
        458     4               
        459     4   p   4v             num_diff(k,i,j,I_RHOT,XDIR) = DIFF4 * CDX(i)**4                    &
        460     4                                                  * ( CNDX(1,i+1) * pott_diff(k,i+2,j)   &
        461     4                                                    - CNDX(2,i+1) * pott_diff(k,i+1,j)   &
        462     4                                                    + CNDX(3,i+1) * pott_diff(k,i  ,j)   &
        463     4                                                    - CNDX(1,i  ) * pott_diff(k,i-1,j) ) &
        464     4                                                  * 0.5D0 * ( FACT_N * ( var(k,i+1,j,I_DENS)+var(k,i  ,j,I_DENS) ) &
        465     4                                                            + FACT_F * ( var(k,i+2,j,I_DENS)+var(k,i-1,j,I_DENS) ) )
        466     4   p   4v          enddo
        467     3   p               enddo
        468     2   p               enddo
        469     1               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        470     2  pp               do j = JS-1, JE
        471     3   p               do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        472     4   p   4v          do k = KS,   KE
        473     4   p   4v             num_diff(k,i,j,I_DENS,YDIR) = DIFF4 * CDY(j)**4                  &
        474     4                                                  * ( CNDY(1,j+1) * dens_diff(k,i,j+2) &
        475     4                                                    - CNDY(2,j+1) * dens_diff(k,i,j+1) &
        476     4                                                    + CNDY(3,j+1) * dens_diff(k,i,j  ) &
        477     4                                                    - CNDY(1,j  ) * dens_diff(k,i,j-1) )
        478     4               
        479     4   p   4v             num_diff(k,i,j,I_RHOT,YDIR) = DIFF4 * CDY(j)**4                    &
        480     4                                                  * ( CNDY(1,j+1) * pott_diff(k,i,j+2)   &
        481     4                                                    - CNDY(2,j+1) * pott_diff(k,i,j+1)   &
        482     4                                                    + CNDY(3,j+1) * pott_diff(k,i,j  )   &
        483     4                                                    - CNDY(1,j  ) * pott_diff(k,i,j-1) ) &
        484     4                                                  * 0.5D0 * ( FACT_N * ( var(k,i,j+1,I_DENS)+var(k,i,j  ,I_DENS) ) &
        485     4                                                            + FACT_F * ( var(k,i,j+2,I_DENS)+var(k,i,j-1,I_DENS) ) )
        486     4   p   4v          enddo
        487     3   p               enddo
        488     2   p               enddo
        489     1               
        490     1                   ! z-momentum
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        491     2  pp               do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 12
                              <<<      var: 8, CNMZ: 4
                              <<< Loop-information  End >>>
        492     3   p               do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        493     4   p   2v          do k = KS,   KE
        494     4   p   2v             num_diff(k,i,j,I_MOMZ,ZDIR) = DIFF4 * ( 0.5D0*(CDZ(k+1)+CDZ(k)) )**4 &
        495     4                                                  * ( CNMZ(1,k  ) * var(k+1,i,j,I_MOMZ) &
        496     4                                                    - CNMZ(2,k  ) * var(k  ,i,j,I_MOMZ) &
        497     4                                                    + CNMZ(3,k  ) * var(k-1,i,j,I_MOMZ) &
        498     4                                                    - CNMZ(1,k-1) * var(k-2,i,j,I_MOMZ) )
        499     4   p   2v          enddo
        500     3   p               enddo
        501     2   p               enddo
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 3)
                              <<< Loop-information  End >>>
        502     2   p               do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<< Loop-information  End >>>
        503     3  pp               do i = IS-1, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        504     4   p   6v          do k = KS-1, KE
        505     4   p   6v             num_diff(k,i,j,I_MOMZ,XDIR) = DIFF4 * CDX(i)**4 &
        506     4                                                  * ( CNDX(1,i+1) * var(k,i+2,j,I_MOMZ) &
        507     4                                                    - CNDX(2,i+1) * var(k,i+1,j,I_MOMZ) &
        508     4                                                    + CNDX(3,i+1) * var(k,i  ,j,I_MOMZ) &
        509     4                                                    - CNDX(1,i  ) * var(k,i-1,j,I_MOMZ) )
        510     4   p   6v          enddo
        511     3   p               enddo
        512     2   p               enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        513     2  pp               do j = JS-1, JE
        514     3   p               do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        515     4   p   6v          do k = KS-1, KE
        516     4   p   6v             num_diff(k,i,j,I_MOMZ,YDIR) = DIFF4 * CDY(j)**4 &
        517     4                                                  * ( CNDY(1,j+1) * var(k,i,j+2,I_MOMZ) &
        518     4                                                    - CNDY(2,j+1) * var(k,i,j+1,I_MOMZ) &
        519     4                                                    + CNDY(3,j+1) * var(k,i,j  ,I_MOMZ) &
        520     4                                                    - CNDY(1,j  ) * var(k,i,j-1,I_MOMZ) )
        521     4   p   6v          enddo
        522     3   p               enddo
        523     2   p               enddo
        524     1               
        525     1                   ! x-momentum
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        526     2  pp               do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 12
                              <<<      var: 8, CNDZ: 4
                              <<< Loop-information  End >>>
        527     3   p               do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        528     4   p   2v          do k = KS,   KE-1
        529     4   p   2v             num_diff(k,i,j,I_MOMX,ZDIR) = DIFF4 * CDZ(k)**4 &
        530     4                                                  * ( CNDZ(1,k+1) * var(k+2,i,j,I_MOMX) &
        531     4                                                    - CNDZ(2,k+1) * var(k+1,i,j,I_MOMX) &
        532     4                                                    + CNDZ(3,k+1) * var(k  ,i,j,I_MOMX) &
        533     4                                                    - CNDZ(1,k  ) * var(k-1,i,j,I_MOMX) )
        534     4   p   2v          enddo
        535     3   p               enddo
        536     2   p               enddo
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 3)
                              <<< Loop-information  End >>>
        537     2   p               do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<< Loop-information  End >>>
        538     3  pp               do i = IS,   IE+1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        539     4   p   6v          do k = KS,   KE
        540     4   p   6v             num_diff(k,i,j,I_MOMX,XDIR) = DIFF4 * ( 0.5D0*(CDX(i+1)+CDX(i)) )**4 &
        541     4                                                  * ( CNMX(1,i  ) * var(k,i+1,j,I_MOMX) &
        542     4                                                    - CNMX(2,i  ) * var(k,i  ,j,I_MOMX) &
        543     4                                                    + CNMX(3,i  ) * var(k,i-1,j,I_MOMX) &
        544     4                                                    - CNMX(1,i-1) * var(k,i-2,j,I_MOMX) )
        545     4   p   6v          enddo
        546     3   p               enddo
        547     2   p               enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        548     2  pp               do j = JS-1, JE
        549     3   p               do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        550     4   p   6v          do k = KS,   KE
        551     4   p   6v             num_diff(k,i,j,I_MOMX,YDIR) = DIFF4 * CDY(j)**4                   &
        552     4                                                  * ( CNDY(1,j+1) * var(k,i,j+2,I_MOMX) &
        553     4                                                    - CNDY(2,j+1) * var(k,i,j+1,I_MOMX) &
        554     4                                                    + CNDY(3,j+1) * var(k,i,j  ,I_MOMX) &
        555     4                                                    - CNDY(1,j  ) * var(k,i,j-1,I_MOMX) )
        556     4   p   6v          enddo
        557     3   p               enddo
        558     2   p               enddo
        559     1               
        560     1                   ! y-momentum
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        561     2  pp               do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 12
                              <<<      var: 8, CNDZ: 4
                              <<< Loop-information  End >>>
        562     3   p               do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        563     4   p   2v          do k = KS, KE-1
        564     4   p   2v             num_diff(k,i,j,I_MOMY,ZDIR) = DIFF4 * CDZ(k)**4 &
        565     4                                                  * ( CNDZ(1,k+1) * var(k+2,i,j,I_MOMY) &
        566     4                                                    - CNDZ(2,k+1) * var(k+1,i,j,I_MOMY) &
        567     4                                                    + CNDZ(3,k+1) * var(k  ,i,j,I_MOMY) &
        568     4                                                    - CNDZ(1,k  ) * var(k-1,i,j,I_MOMY) )
        569     4   p   2v          enddo
        570     3   p               enddo
        571     2   p               enddo
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 3)
                              <<< Loop-information  End >>>
        572     2   p               do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<<  [OPTIMIZATION]
                              <<<    INTERCHANGED(nest: 2)
                              <<< Loop-information  End >>>
        573     3  pp               do i = IS-1, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        574     4   p   6v          do k = KS,   KE
        575     4   p   6v             num_diff(k,i,j,I_MOMY,XDIR) = DIFF4 * CDX(i)**4 &
        576     4                                                  * ( CNDX(1,i+1) * var(k,i+2,j,I_MOMY) &
        577     4                                                    - CNDX(2,i+1) * var(k,i+1,j,I_MOMY) &
        578     4                                                    + CNDX(3,i+1) * var(k,i  ,j,I_MOMY) &
        579     4                                                    - CNDX(1,i  ) * var(k,i-1,j,I_MOMY) )
        580     4   p   6v          enddo
        581     3   p               enddo
        582     2   p               enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        583     2  pp               do j = JS, JE+1
        584     3   p               do i = IS, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        585     4   p   6v          do k = KS, KE
        586     4   p   6v             num_diff(k,i,j,I_MOMY,YDIR) = DIFF4 * ( 0.5D0*(CDY(j+1)+CDY(j)) )**4 &
        587     4                                                  * ( CNMY(1,j  ) * var(k,i,j+1,I_MOMY) &
        588     4                                                    - CNMY(2,j  ) * var(k,i,j  ,I_MOMY) &
        589     4                                                    + CNMY(3,j  ) * var(k,i,j-1,I_MOMY) &
        590     4                                                    - CNMY(1,j-1) * var(k,i,j-2,I_MOMY) )
        591     4   p   6v          enddo
        592     3   p               enddo
        593     2   p               enddo
        594     1               
        595     1               #ifdef _FPCOLL_
        596     1               call STOP_COLLECTION("SET")
        597     1               call START_COLLECTION("RK3")
        598     1               #endif
        599     1               
        600     1                   !##### Start RK #####
        601     2                   do rko = 1, RK
        602     2                      dtrk  = TIME_DTSEC_ATMOS_DYN / (RK - rko + 1)
        603     2                      rdtrk = 1.D0 / dtrk
        604     2               
        605     3                      if ( rko > 1 ) then
        606     3                         call COMM_wait( var(:,:,:,I_DENS), I_DENS )
        607     3                         call COMM_wait( var(:,:,:,I_MOMZ), I_MOMZ )
        608     3                         call COMM_wait( var(:,:,:,I_MOMX), I_MOMX )
        609     3                         call COMM_wait( var(:,:,:,I_MOMY), I_MOMY )
        610     3                      endif
        611     2               
        612     2                      ! momentum -> velocity
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        613     3  pp                  do j = JS-2, JE+2
        614     4   p                  do i = IS-2, IE+2
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        615     5   p   6v             do k = KS,   KE-1
        616     5   p   6v                diagvar(k,i,j,I_VELZ) = 2.D0 * var(k,i,j,I_MOMZ) &
        617     5                                               / ( var(k+1,i,j,I_DENS)+var(k,i,j,I_DENS) )
        618     5   p   6v             enddo
        619     4   p                  enddo
        620     3   p                  enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        621     3  pp                  do j = JS-2, JE+2
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<< Loop-information  End >>>
        622     4   p   8v             do i = IS-2, IE+2
        623     4   p   8v                diagvar(KS-1,i,j,I_VELZ) = 0.D0
        624     4   p   8v                diagvar(KE  ,i,j,I_VELZ) = 0.D0
        625     4   p   8v             enddo
        626     3   p                  enddo
        627     2               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        628     3  pp                  do j = JS-2, JE+2
        629     4   p                  do i = IS-2, IE+1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        630     5   p   6v             do k = KS-2, KE+2
        631     5   p   6v                diagvar(k,i,j,I_VELX) = 2.D0 * var(k,i,j,I_MOMX) &
        632     5                                               / ( var(k,i+1,j,I_DENS)+var(k,i,j,I_DENS) )
        633     5   p   6v             enddo
        634     4   p                  enddo
        635     3   p                  enddo
        636     2               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        637     3  pp                  do j = JS-2, JE+1
        638     4   p                  do i = IS-2, IE+2
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        639     5   p   6v             do k = KS-2, KE+2
        640     5   p   6v                diagvar(k,i,j,I_VELY) = 2.D0 * var(k,i,j,I_MOMY) &
        641     5                                               / ( var(k,i,j+1,I_DENS)+var(k,i,j,I_DENS) )
        642     5   p   6v             enddo
        643     4   p                  enddo
        644     3   p                  enddo
        645     2               
        646     2               
        647     2                      !##### continuity equation #####
        648     2                      ! at (x, y, interface)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        649     3  pp                  do j = JS,   JE
        650     4   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        651     5   p   8v             do k = KS,   KE-1
        652     5   p   8v                mflx_hi(k,i,j,ZDIR) = var(k,i,j,I_MOMZ) &
        653     5                                             + num_diff(k,i,j,I_DENS,ZDIR) * rdtrk
        654     5   p   8v             enddo
        655     4   p                  enddo
        656     3   p                  enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        657     3  pp                  do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<< Loop-information  End >>>
        658     4   p   8v             do i = IS,   IE
        659     4   p   8v                mflx_hi(KS-1,i,j,ZDIR) = 0.D0 ! bottom boundary
        660     4   p   8v                mflx_hi(KE  ,i,j,ZDIR) = 0.D0 ! top    boundary
        661     4   p   8v             enddo
        662     3   p                  enddo
        663     2                      ! at (u, y, layer)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        664     3  pp                  do j = JS,   JE
        665     4   p                  do i = IS-1, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        666     5   p   8v             do k = KS,   KE
        667     5   p   8v                mflx_hi(k,i,j,XDIR) = var(k,i,j,I_MOMX) &
        668     5                                             + num_diff(k,i,j,I_DENS,XDIR) * rdtrk
        669     5   p   8v             enddo
        670     4   p                  enddo
        671     3   p                  enddo
        672     2                      ! at (x, v, layer)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        673     3  pp                  do j = JS-1, JE
        674     4   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        675     5   p   8v             do k = KS,   KE
        676     5   p   8v                mflx_hi(k,i,j,YDIR) = var(k,i,j,I_MOMY) &
        677     5                                             + num_diff(k,i,j,I_DENS,YDIR) * rdtrk
        678     5   p   8v             enddo
        679     4   p                  enddo
        680     3   p                  enddo
        681     2               
        682     3                      if ( rko == RK .AND. QA > 0 ) then
        683     3                         call COMM_vars( mflx_hi(:,:,:,ZDIR), VA+ZDIR )
        684     3                         call COMM_vars( mflx_hi(:,:,:,XDIR), VA+XDIR )
        685     3                         call COMM_vars( mflx_hi(:,:,:,YDIR), VA+YDIR )
        686     3                      endif
        687     2               
        688     2                      !##### momentum equation (z) #####
        689     2                      ! at (x, y, layer)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        690     3  pp                  do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 8
                              <<<      var: 8
                              <<< Loop-information  End >>>
        691     4   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        692     5   p   4v             do k = KS,   KE
        693     5   p   4v                qflx_hi(k,i,j,ZDIR) = 0.25D0 * ( diagvar(k,i,j,I_VELZ)+diagvar(k-1,i,j,I_VELZ) ) &
        694     5                                             * ( FACT_N * ( var(k  ,i,j,I_MOMZ)+var(k-1,i,j,I_MOMZ) )     &
        695     5                                               + FACT_F * ( var(k+1,i,j,I_MOMZ)+var(k-2,i,j,I_MOMZ) ) )   &
        696     5                                             + num_diff(k,i,j,I_MOMZ,ZDIR) * rdtrk
        697     5   p   4v             enddo
        698     4   p                  enddo
        699     3   p                  enddo
        700     2                      ! at (u, y, interface)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        701     3  pp                  do j = JS,   JE
        702     4   p                  do i = IS-1, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        703     5   p   4v             do k = KS-1, KE
        704     5   p   4v                qflx_hi(k,i,j,XDIR) = 0.25D0 * ( diagvar(k+1,i,j,I_VELX)+diagvar(k,i,j,I_VELX) ) &
        705     5                                             * ( FACT_N * ( var(k,i+1,j,I_MOMZ)+var(k,i  ,j,I_MOMZ) )     &
        706     5                                               + FACT_F * ( var(k,i+2,j,I_MOMZ)+var(k,i-1,j,I_MOMZ) ) )   &
        707     5                                             + num_diff(k,i,j,I_MOMZ,XDIR) * rdtrk
        708     5   p   4v             enddo
        709     4   p                  enddo
        710     3   p                  enddo
        711     2                      ! at (x, v, interface)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        712     3  pp                  do j = JS-1, JE
        713     4   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        714     5   p   4v             do k = KS-1, KE
        715     5   p   4v                qflx_hi(k,i,j,YDIR) = 0.25D0 * ( diagvar(k+1,i,j,I_VELY)+diagvar(k,i,j,I_VELY) ) &
        716     5                                             * ( FACT_N * ( var(k,i,j+1,I_MOMZ)+var(k,i,j  ,I_MOMZ) )     &
        717     5                                               + FACT_F * ( var(k,i,j+2,I_MOMZ)+var(k,i,j-1,I_MOMZ) ) )   &
        718     5                                             + num_diff(k,i,j,I_MOMZ,YDIR) * rdtrk
        719     5   p   4v             enddo
        720     4   p                  enddo
        721     3   p                  enddo
        722     2               
        723     3                      if ( rko > 1 ) then
        724     3                         call COMM_wait( var(:,:,:,I_RHOT), I_RHOT )
        725     3                      endif
        726     2               
        727     2                      ! pressure
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        728     3  pp                  do j = JS-2, JE+2
        729     4   p                  do i = IS-2, IE+2
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        730     5   p   2v             do k = KS-2, KE+2
        731     5   p   2v                diagvar(k,i,j,I_PRES) = Pstd * ( var(k,i,j,I_RHOT) * Rdry / Pstd )**CPovCV
        732     5   p   2v             enddo
        733     4   p                  enddo
        734     3   p                  enddo
        735     2               
        736     2               
        737     2                      !--- update momentum(z)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        738     3  pp                  do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 4
                              <<<      RDXC: 4
                              <<< Loop-information  End >>>
        739     4   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        740     5   p   4v             do k = KS,   KE-1
        741     5   p   4v                var(k,i,j,I_MOMZ) = var_s(k,i,j,I_MOMZ) &
        742     5                                           + dtrk * ( - ( ( qflx_hi(k+1,i,j,ZDIR)-qflx_hi(k,i  ,j  ,ZDIR) ) * RDZF(k)   &
        743     5                                                        + ( qflx_hi(k  ,i,j,XDIR)-qflx_hi(k,i-1,j  ,XDIR) ) * RDXC(i)   &
        744     5                                                        + ( qflx_hi(k  ,i,j,YDIR)-qflx_hi(k,i  ,j-1,YDIR) ) * RDYC(j) ) & ! flux divergence
        745     5                                                      - ( diagvar(k+1,i,j,I_PRES)-diagvar(k,i,j,I_PRES) ) * RDZF(k)     & ! pressure gradient force
        746     5                                                      - ( var(k+1,i,j,I_DENS)+var(k,i,j,I_DENS) ) * 0.5D0 * GRAV        & ! gravity force
        747     5                                                      + ray_damp(k,i,j,I_MOMZ)                                          ) ! additional damping force
        748     5   p   4v             enddo
        749     4   p                  enddo
        750     3   p                  enddo
        751     2               
        752     2                      !--- update density
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        753     3  pp                  do j = JS, JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 4
                              <<<      RDXC: 4
                              <<< Loop-information  End >>>
        754     4   p                  do i = IS, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        755     5   p   4v             do k = KS, KE
        756     5   p   4v                var(k,i,j,I_DENS) = var_s(k,i,j,I_DENS) &
        757     5                                           + dtrk * ( - ( ( mflx_hi(k,i,j,ZDIR)-mflx_hi(k-1,i,  j,  ZDIR) ) * RDZC(k)   &
        758     5                                                        + ( mflx_hi(k,i,j,XDIR)-mflx_hi(k  ,i-1,j,  XDIR) ) * RDXC(i)   &
        759     5                                                        + ( mflx_hi(k,i,j,YDIR)-mflx_hi(k  ,i,  j-1,YDIR) ) * RDYC(j) ) ) ! divergence
        760     5   p   4v             enddo
        761     4   p                  enddo
        762     3   p                  enddo
        763     2               
        764     2                      call COMM_vars( var(:,:,:,I_DENS), I_DENS )
        765     2                      call COMM_vars( var(:,:,:,I_MOMZ), I_MOMZ )
        766     2               
        767     2                      !##### momentum equation (x) #####
        768     2                      ! at (u, y, interface)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        769     3  pp                  do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 8
                              <<<      var: 8
                              <<< Loop-information  End >>>
        770     4   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        771     5   p   4v             do k = KS+1, KE-2
        772     5   p   4v                qflx_hi(k,i,j,ZDIR) = 0.25D0 * ( diagvar(k,i+1,j,I_VELZ)+diagvar(k,i,j,I_VELZ) ) &
        773     5                                             * ( FACT_N * ( var(k+1,i,j,I_MOMX)+var(k  ,i,j,I_MOMX) )     &
        774     5                                               + FACT_F * ( var(k+2,i,j,I_MOMX)+var(k-1,i,j,I_MOMX) ) )   &
        775     5                                             + num_diff(k,i,j,I_MOMX,ZDIR) * rdtrk
        776     5   p   4v             enddo
        777     4   p                  enddo
        778     3   p                  enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        779     3  pp                  do j = JS, JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        780     4   p   2v             do i = IS, IE
        781     4   p   2v                qflx_hi(KS-1,i,j,ZDIR) = 0.D0                                                               ! bottom boundary
        782     4   p   2v                qflx_hi(KS  ,i,j,ZDIR) = 0.25D0 * ( diagvar(KS  ,i+1,j,I_VELZ)+diagvar(KS  ,i,j,I_VELZ) ) & ! just above the bottom boundary
        783     4                                                * ( var(KS+1,i,j,I_MOMX)+var(KS,i,j,I_MOMX) )                      &
        784     4                                                + num_diff(KS  ,i,j,I_MOMX,ZDIR) * rdtrk
        785     4   p   2v                qflx_hi(KE-1,i,j,ZDIR) = 0.25D0 * ( diagvar(KE-1,i+1,j,I_VELZ)+diagvar(KE-1,i,j,I_VELZ) ) & ! just below the top boundary
        786     4                                                * ( var(KE,i,j,I_MOMX)+var(KE-1,i,j,I_MOMX) )                      &
        787     4                                                + num_diff(KE-1,i,j,I_MOMX,ZDIR) * rdtrk
        788     4   p   2v                qflx_hi(KE  ,i,j,ZDIR) = 0.D0                                                               ! top boundary
        789     4   p   2v             enddo
        790     3   p                  enddo
        791     2                      ! at (x, y, layer)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        792     3  pp                  do j = JS,   JE
        793     4   p                  do i = IS,   IE+1
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        794     5   p   4v             do k = KS,   KE
        795     5   p   4v                qflx_hi(k,i,j,XDIR) = 0.25D0 * ( diagvar(k,i,j,I_VELX)+diagvar(k,i-1,j,I_VELX) ) &
        796     5                                             * ( FACT_N * ( var(k,i  ,j,I_MOMX)+var(k,i-1,j,I_MOMX) )     &
        797     5                                               + FACT_F * ( var(k,i+1,j,I_MOMX)+var(k,i-2,j,I_MOMX) ) )   &
        798     5                                             + num_diff(k,i,j,I_MOMX,XDIR) * rdtrk
        799     5   p   4v             enddo
        800     4   p                  enddo
        801     3   p                  enddo
        802     2                      ! at (u, v, layer)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        803     3  pp                  do j = JS-1, JE
        804     4   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        805     5   p   4v             do k = KS,   KE
        806     5   p   4v                qflx_hi(k,i,j,YDIR) = 0.25D0 * ( diagvar(k,i+1,j,I_VELY)+diagvar(k,i,j,I_VELY) ) &
        807     5                                             * ( FACT_N * ( var(k,i,j+1,I_MOMX)+var(k,i,j  ,I_MOMX) )     &
        808     5                                               + FACT_F * ( var(k,i,j+2,I_MOMX)+var(k,i,j-1,I_MOMX) ) )   &
        809     5                                             + num_diff(k,i,j,I_MOMX,YDIR) * rdtrk
        810     5   p   4v             enddo
        811     4   p                  enddo
        812     3   p                  enddo
        813     2               
        814     2                      !--- update momentum(x)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        815     3  pp                  do j = JS, JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 4
                              <<<      RDXF: 4
                              <<< Loop-information  End >>>
        816     4   p                  do i = IS, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        817     5   p   4v             do k = KS, KE
        818     5   p   4v                var(k,i,j,I_MOMX) = var_s(k,i,j,I_MOMX) &
        819     5                                           + dtrk * ( - ( ( qflx_hi(k,i  ,j,ZDIR)-qflx_hi(k-1,i,j,  ZDIR) ) * RDZC(k)   &
        820     5                                                        + ( qflx_hi(k,i+1,j,XDIR)-qflx_hi(k  ,i,j,  XDIR) ) * RDXF(i)   &
        821     5                                                        + ( qflx_hi(k,i  ,j,YDIR)-qflx_hi(k  ,i,j-1,YDIR) ) * RDYC(j) ) & ! flux divergence
        822     5                                                      - ( diagvar(k,i+1,j,I_PRES)-diagvar(k,i,j,I_PRES) ) * RDXF(i)     & ! pressure gradient force
        823     5                                                      + ray_damp(k,i,j,I_MOMX)                                          ) ! additional damping force
        824     5   p   4v             enddo
        825     4   p                  enddo
        826     3   p                  enddo
        827     2               
        828     2                      call COMM_vars( var(:,:,:,I_MOMX), I_MOMX )
        829     2               
        830     2                      !##### momentum equation (y) #####
        831     2                      ! at (x, v, interface)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        832     3  pp                  do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 8
                              <<<      var: 8
                              <<< Loop-information  End >>>
        833     4   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        834     5   p   4v             do k = KS+1, KE-2
        835     5   p   4v                qflx_hi(k,i,j,ZDIR) = 0.25D0 * ( diagvar(k,i,j+1,I_VELZ)+diagvar(k,i,j,I_VELZ) ) &
        836     5                                             * ( FACT_N * ( var(k+1,i,j,I_MOMY)+var(k  ,i,j,I_MOMY) )     &
        837     5                                               + FACT_F * ( var(k+2,i,j,I_MOMY)+var(k-1,i,j,I_MOMY) ) )   &
        838     5                                             + num_diff(k,i,j,I_MOMY,ZDIR) * rdtrk
        839     5   p   4v             enddo
        840     4   p                  enddo
        841     3   p                  enddo
        842     2               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        843     3  pp                  do j = JS, JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        844     4   p   2v             do i = IS, IE
        845     4   p   2v                qflx_hi(KS-1,i,j,ZDIR) = 0.D0                                                               ! bottom boundary
        846     4   p   2v                qflx_hi(KS  ,i,j,ZDIR) = 0.25D0 * ( diagvar(KS  ,i,j+1,I_VELZ)+diagvar(KS  ,i,j,I_VELZ) ) & ! just above the bottom boundary
        847     4                                                * ( var(KS+1,i,j,I_MOMY)+var(KS,i,j,I_MOMY) )                      &
        848     4                                                + num_diff(KS  ,i,j,I_MOMY,ZDIR) * rdtrk
        849     4   p   2v                qflx_hi(KE-1,i,j,ZDIR) = 0.25D0 * ( diagvar(KE-1,i,j+1,I_VELZ)+diagvar(KE-1,i,j,I_VELZ) ) & ! just below the top boundary
        850     4                                                * ( var(KE,i,j,I_MOMY)+var(KE-1,i,j,I_MOMY) )                      &
        851     4                                                + num_diff(KE-1,i,j,I_MOMY,ZDIR) * rdtrk
        852     4   p   2v                qflx_hi(KE  ,i,j,ZDIR) = 0.D0                                                               ! top boundary
        853     4   p   2v             enddo
        854     3   p                  enddo
        855     2                      ! at (u, v, layer)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        856     3  pp                  do j = JS,   JE
        857     4   p                  do i = IS-1, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        858     5   p   4v             do k = KS,   KE
        859     5   p   4v                qflx_hi(k,i,j,XDIR) = 0.25D0 * ( diagvar(k,i,j+1,I_VELX)+diagvar(k,i,j,I_VELX) ) &
        860     5                                             * ( FACT_N * ( var(k,i+1,j,I_MOMY)+var(k,i  ,j,I_MOMY) )     &
        861     5                                               + FACT_F * ( var(k,i+2,j,I_MOMY)+var(k,i-1,j,I_MOMY) ) )   &
        862     5                                             + num_diff(k,i,j,I_MOMY,XDIR) * rdtrk
        863     5   p   4v             enddo
        864     4   p                  enddo
        865     3   p                  enddo
        866     2                      ! at (x, y, layer)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        867     3  pp                  do j = JS, JE+1
        868     4   p                  do i = IS, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        869     5   p   4v             do k = KS, KE
        870     5   p   4v                qflx_hi(k,i,j,YDIR) = 0.25D0 * ( diagvar(k,i,j,I_VELY)+diagvar(k,i,j-1,I_VELY) ) &
        871     5                                             * ( FACT_N * ( var(k,i,j  ,I_MOMY)+var(k,i,j-1,I_MOMY) )     &
        872     5                                               + FACT_F * ( var(k,i,j+1,I_MOMY)+var(k,i,j-2,I_MOMY) ) )   &
        873     5                                             + num_diff(k,i,j,I_MOMY,YDIR) * rdtrk
        874     5   p   4v             enddo
        875     4   p                  enddo
        876     3   p                  enddo
        877     2               
        878     2                      !--- update momentum(y)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        879     3  pp                  do j = JS, JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 4
                              <<<      RDXC: 4
                              <<< Loop-information  End >>>
        880     4   p                  do i = IS, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        881     5   p   4v             do k = KS, KE
        882     5   p   4v                var(k,i,j,I_MOMY) = var_s(k,i,j,I_MOMY) &
        883     5                                           + dtrk * ( - ( ( qflx_hi(k,i,j  ,ZDIR)-qflx_hi(k-1,i  ,j,ZDIR) ) * RDZC(k)   &
        884     5                                                        + ( qflx_hi(k,i,j  ,XDIR)-qflx_hi(k  ,i-1,j,XDIR) ) * RDXC(i)   &
        885     5                                                        + ( qflx_hi(k,i,j+1,YDIR)-qflx_hi(k  ,i  ,j,YDIR) ) * RDYF(j) ) & ! flux divergence
        886     5                                                      - ( diagvar(k,i,j+1,I_PRES)-diagvar(k,i,j,I_PRES) ) * RDYF(j)     & ! pressure gradient force
        887     5                                                      + ray_damp(k,i,j,I_MOMY)                                          ) ! additional damping force
        888     5   p   4v             enddo
        889     4   p                  enddo
        890     3   p                  enddo
        891     2               
        892     2                      call COMM_vars( var(:,:,:,I_MOMY), I_MOMY )
        893     2               
        894     2                      !##### Thermodynamic Equation #####
        895     2               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        896     3  pp                  do j = JS-2, JE+2
        897     4   p                  do i = IS-2, IE+2
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        898     5   p   6v             do k = KS-2, KE+2
        899     5   p   6v                diagvar(k,i,j,I_POTT) = var(k,i,j,I_RHOT) / var(k,i,j,I_DENS)
        900     5   p   6v             enddo
        901     4   p                  enddo
        902     3   p                  enddo
        903     2               
        904     2                      ! at (x, y, interface)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        905     3  pp                  do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 16
                              <<<      diagvar: 10, num_diff: 2, mflx_hi: 2
                              <<<      qflx_hi: 2
                              <<< Loop-information  End >>>
        906     4   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        907     5   p   6v             do k = KS+1, KE-2
        908     5   p   6v                qflx_hi(k,i,j,ZDIR) = 0.5D0 * mflx_hi(k,i,j,ZDIR)                                      &
        909     5                                             * ( FACT_N * ( diagvar(k+1,i,j,I_POTT)+diagvar(k  ,i,j,I_POTT) )   &
        910     5                                               + FACT_F * ( diagvar(k+2,i,j,I_POTT)+diagvar(k-1,i,j,I_POTT) ) ) &
        911     5                                             + num_diff(k,i,j,I_RHOT,ZDIR) * rdtrk
        912     5   p   6v             enddo
        913     4   p                  enddo
        914     3   p                  enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        915     3  pp                  do j = JS, JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        916     4   p   2v             do i = IS, IE
        917     4   p   2v                qflx_hi(KS-1,i,j,ZDIR) = 0.D0                                                  ! bottom boundary
        918     4   p   2v                qflx_hi(KS  ,i,j,ZDIR) = 0.5D0 * mflx_hi(KS  ,i,j,ZDIR)                      & ! just above the bottom boundary
        919     4                                                * ( diagvar(KS+1,i,j,I_POTT)+diagvar(KS,i,j,I_POTT) ) &
        920     4                                                + num_diff(KS  ,i,j,I_RHOT,ZDIR) * rdtrk
        921     4   p   2v                qflx_hi(KE-1,i,j,ZDIR) = 0.5D0 * mflx_hi(KE-1,i,j,ZDIR)                      & ! just below the top boundary
        922     4                                                * ( diagvar(KE,i,j,I_POTT)+diagvar(KE-1,i,j,I_POTT) ) &
        923     4                                                + num_diff(KE-1,i,j,I_RHOT,ZDIR) * rdtrk
        924     4   p   2v                qflx_hi(KE  ,i,j,ZDIR) = 0.D0                                                  ! top boundary
        925     4   p   2v             enddo
        926     3   p                  enddo
        927     2                      ! at (u, y, layer)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        928     3  pp                  do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 14
                              <<<      num_diff: 2, mflx_hi: 2, diagvar: 8
                              <<<      qflx_hi: 2
                              <<< Loop-information  End >>>
        929     4   p                  do i = IS-1, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        930     5   p   6v             do k = KS,   KE
        931     5   p   6v                qflx_hi(k,i,j,XDIR) = 0.5D0 * mflx_hi(k,i,j,XDIR)                                      &
        932     5                                             * ( FACT_N * ( diagvar(k,i+1,j,I_POTT)+diagvar(k,i  ,j,I_POTT) )   &
        933     5                                               + FACT_F * ( diagvar(k,i+2,j,I_POTT)+diagvar(k,i-1,j,I_POTT) ) ) &
        934     5                                             + num_diff(k,i,j,I_RHOT,XDIR) * rdtrk
        935     5   p   6v             enddo
        936     4   p                  enddo
        937     3   p                  enddo
        938     2                      ! at (x, v, layer)
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        939     3  pp                  do j = JS-1, JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 14
                              <<<      num_diff: 2, mflx_hi: 2, diagvar: 8
                              <<<      qflx_hi: 2
                              <<< Loop-information  End >>>
        940     4   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        941     5   p   6v             do k = KS,   KE
        942     5   p   6v                qflx_hi(k,i,j,YDIR) = 0.5D0 * mflx_hi(k,i,j,YDIR)                                      &
        943     5                                             * ( FACT_N * ( diagvar(k,i,j+1,I_POTT)+diagvar(k,i,j  ,I_POTT) )   &
        944     5                                               + FACT_F * ( diagvar(k,i,j+2,I_POTT)+diagvar(k,i,j-1,I_POTT) ) ) &
        945     5                                             + num_diff(k,i,j,I_RHOT,YDIR) * rdtrk
        946     5   p   6v             enddo
        947     4   p                  enddo
        948     3   p                  enddo
        949     2               
        950     2                      !--- update rho*theta
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
        951     3  pp                  do j = JS, JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 4
                              <<<      RDXC: 4
                              <<< Loop-information  End >>>
        952     4   p                  do i = IS, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
        953     5   p   4v             do k = KS, KE
        954     5   p   4v                var(k,i,j,I_RHOT) = var_s(k,i,j,I_RHOT) &
        955     5                                           + dtrk * ( - ( ( qflx_hi(k,i,j,ZDIR)-qflx_hi(k-1,i,  j,  ZDIR) ) * RDZC(k)   &
        956     5                                                        + ( qflx_hi(k,i,j,XDIR)-qflx_hi(k  ,i-1,j,  XDIR) ) * RDXC(i)   &
        957     5                                                        + ( qflx_hi(k,i,j,YDIR)-qflx_hi(k  ,i,  j-1,YDIR) ) * RDYC(j) ) & ! divergence
        958     5                                                      + ray_damp(k,i,j,I_RHOT)                                          ) ! additional damping force
        959     5   p   4v             enddo
        960     4   p                  enddo
        961     3   p                  enddo
        962     2               
        963     2                      call COMM_vars( var(:,:,:,I_RHOT), I_RHOT )
        964     2               
        965     2               !       call COMM_vars( var(:,:,:,1), 1 )
        966     2               !       call COMM_vars( var(:,:,:,2), 2 )
        967     2               !       call COMM_vars( var(:,:,:,3), 3 )
        968     2               !       call COMM_vars( var(:,:,:,4), 4 )
        969     2               !       call COMM_vars( var(:,:,:,5), 5 )
        970     2               !       call COMM_wait( var(:,:,:,1), 1 )
        971     2               !       call COMM_wait( var(:,:,:,2), 2 )
        972     2               !       call COMM_wait( var(:,:,:,3), 3 )
        973     2               !       call COMM_wait( var(:,:,:,4), 4 )
        974     2               !       call COMM_wait( var(:,:,:,5), 5 )
        975     2               
        976     2                   enddo ! RK loop
        977     1               
        978     1               !    call COMM_vars( mflx_hi(:,:,:,ZDIR), VA+ZDIR )
        979     1               !    call COMM_vars( mflx_hi(:,:,:,XDIR), VA+XDIR )
        980     1               !    call COMM_vars( mflx_hi(:,:,:,YDIR), VA+YDIR )
        981     1               !    call COMM_wait( mflx_hi(:,:,:,ZDIR), VA+ZDIR )
        982     1               !    call COMM_wait( mflx_hi(:,:,:,XDIR), VA+XDIR )
        983     1               !    call COMM_wait( mflx_hi(:,:,:,YDIR), VA+YDIR )
        984     1               
        985     1               #ifdef _FPCOLL_
        986     1               call STOP_COLLECTION("RK3")
        987     1               call START_COLLECTION("FCT")
        988     1               #endif
        989     1               
        990     1                   !##### advection of scalar quantity #####
        991     1               
        992     1                   call COMM_wait( var(:,:,:,I_DENS), I_DENS )
        993     1                   call COMM_wait( var(:,:,:,I_MOMZ), I_MOMZ )
        994     1                   call COMM_wait( var(:,:,:,I_MOMX), I_MOMX )
        995     1                   call COMM_wait( var(:,:,:,I_MOMY), I_MOMY )
        996     1               
        997     2                   if ( QA > 0 ) then
        998     2               
        999     2                   call COMM_wait( mflx_hi(:,:,:,ZDIR), VA+ZDIR )
       1000     2                   call COMM_wait( mflx_hi(:,:,:,XDIR), VA+XDIR )
       1001     2                   call COMM_wait( mflx_hi(:,:,:,YDIR), VA+YDIR )
       1002     2               
       1003     3                   do iq = 6, 5+QA
       1004     3               
       1005     3                      call COMM_wait( var(:,:,:,iq-1), iq-1 )
       1006     3               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       1007     4  pp                  do j  = 1, JA
       1008     5   p                  do i  = 1, IA
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<< Loop-information  End >>>
       1009     6   p   8v             do k  = 1, KA
       1010     6   p   8v                rjmns(k,i,j,XDIR) = 0.D0
       1011     6   p   8v                rjmns(k,i,j,YDIR) = 0.D0
       1012     6   p   8v                rjmns(k,i,j,ZDIR) = 0.D0
       1013     6   p   8v             enddo
       1014     5   p                  enddo
       1015     4   p                  enddo
       1016     3               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       1017     4  pp                  do j = JS,   JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 12
                              <<<      var: 12
                              <<< Loop-information  End >>>
       1018     5   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
       1019     6   p   4v             do k = KS+1, KE-2
       1020     6   p   4v                qflx_lo(k,i,j,ZDIR) = 0.5D0 * (     mflx_hi(k,i,j,ZDIR)  * ( var(k+1,i,j,iq)+var(k,i,j,iq) ) &
       1021     6                                                       - abs(mflx_hi(k,i,j,ZDIR)) * ( var(k+1,i,j,iq)-var(k,i,j,iq) ) )
       1022     6               
       1023     6   p   4v                qflx_hi(k,i,j,ZDIR) = 0.5D0 * mflx_hi(k,i,j,ZDIR)                    &
       1024     6                                             * ( FACT_N * ( var(k+1,i,j,iq)+var(k  ,i,j,iq) ) &
       1025     6                                               + FACT_F * ( var(k+2,i,j,iq)+var(k-1,i,j,iq) ) )
       1026     6               
       1027     6   p   4v                qflx_anti(k,i,j,ZDIR) = qflx_hi(k,i,j,ZDIR) - qflx_lo(k,i,j,ZDIR)
       1028     6   p   4v             enddo
       1029     5   p                  enddo
       1030     4   p                  enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       1031     4  pp                  do j = JS, JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
       1032     5   p    v             do i = IS, IE
       1033     5   p    v                qflx_lo(KS-1,i,j,ZDIR) = 0.D0                                                                          ! bottom boundary
       1034     5   p    v                qflx_lo(KS  ,i,j,ZDIR) = 0.5D0 * (     mflx_hi(KS  ,i,j,ZDIR)  * ( var(KS+1,i,j,iq)+var(KS,i,j,iq) ) & ! just above the bottom boundary
       1035     5                                                          - abs(mflx_hi(KS  ,i,j,ZDIR)) * ( var(KS+1,i,j,iq)-var(KS,i,j,iq) ) )
       1036     5   p    v                qflx_lo(KE-1,i,j,ZDIR) = 0.5D0 * (     mflx_hi(KE-1,i,j,ZDIR)  * ( var(KE,i,j,iq)+var(KE-1,i,j,iq) ) & ! just below the top boundary
       1037     5                                                          - abs(mflx_hi(KE-1,i,j,ZDIR)) * ( var(KE,i,j,iq)-var(KE-1,i,j,iq) ) )
       1038     5   p    v                qflx_lo(KE  ,i,j,ZDIR) = 0.D0                                                                          ! top boundary
       1039     5               
       1040     5   p    v                qflx_hi(KS-1,i,j,ZDIR) = 0.D0
       1041     5   p    v                qflx_hi(KS  ,i,j,ZDIR) = 0.5D0 * mflx_hi(KS  ,i,j,ZDIR) * ( var(KS+1,i,j,iq)+var(KS,i,j,iq) )
       1042     5   p    v                qflx_hi(KE-1,i,j,ZDIR) = 0.5D0 * mflx_hi(KE-1,i,j,ZDIR) * ( var(KE,i,j,iq)+var(KE-1,i,j,iq) )
       1043     5   p    v                qflx_hi(KE  ,i,j,ZDIR) = 0.D0
       1044     5               
       1045     5   p    v                qflx_anti(KS-1,i,j,ZDIR) = 0.D0
       1046     5   p    v                qflx_anti(KS  ,i,j,ZDIR) = 0.D0
       1047     5   p    v                qflx_anti(KE-1,i,j,ZDIR) = 0.D0
       1048     5   p    v                qflx_anti(KE  ,i,j,ZDIR) = 0.D0
       1049     5   p    v             enddo
       1050     4   p                  enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       1051     4  pp                  do j = JS,   JE
       1052     5   p                  do i = IS-1, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
       1053     6   p   4v             do k = KS,   KE
       1054     6   p   4v                qflx_lo(k,i,j,XDIR) = 0.5D0 * (     mflx_hi(k,i,j,XDIR)  * ( var(k,i+1,j,iq)+var(k,i,j,iq) ) &
       1055     6                                                       - abs(mflx_hi(k,i,j,XDIR)) * ( var(k,i+1,j,iq)-var(k,i,j,iq) ) )
       1056     6               
       1057     6   p   4v                qflx_hi(k,i,j,XDIR) = 0.5D0 * mflx_hi(k,i,j,XDIR)                    &
       1058     6                                             * ( FACT_N * ( var(k,i+1,j,iq)+var(k,i  ,j,iq) ) &
       1059     6                                               + FACT_F * ( var(k,i+2,j,iq)+var(k,i-1,j,iq) ) )
       1060     6               
       1061     6   p   4v                qflx_anti(k,i,j,XDIR) = qflx_hi(k,i,j,XDIR) - qflx_lo(k,i,j,XDIR)
       1062     6   p   4v             enddo
       1063     5   p                  enddo
       1064     4   p                  enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       1065     4  pp                  do j = JS-1, JE
       1066     5   p                  do i = IS,   IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
       1067     6   p   4v             do k = KS,   KE
       1068     6   p   4v                qflx_lo(k,i,j,YDIR) = 0.5D0 * (     mflx_hi(k,i,j,YDIR)  * ( var(k,i,j+1,iq)+var(k,i,j,iq) ) &
       1069     6                                                       - abs(mflx_hi(k,i,j,YDIR)) * ( var(k,i,j+1,iq)-var(k,i,j,iq) ) )
       1070     6               
       1071     6   p   4v                qflx_hi(k,i,j,YDIR) = 0.5D0 * mflx_hi(k,i,j,YDIR)                    &
       1072     6                                             * ( FACT_N * ( var(k,i,j+1,iq)+var(k,i,j  ,iq) ) &
       1073     6                                               + FACT_F * ( var(k,i,j+2,iq)+var(k,i,j-1,iq) ) )
       1074     6               
       1075     6   p   4v                qflx_anti(k,i,j,YDIR) = qflx_hi(k,i,j,YDIR) - qflx_lo(k,i,j,YDIR)
       1076     6   p   4v             enddo
       1077     5   p                  enddo
       1078     4   p                  enddo
       1079     3               
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       1080     4  pp                  do j = JS, JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 2
                              <<<      RDXC: 2
                              <<< Loop-information  End >>>
       1081     5   p                  do i = IS, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 32
                              <<<      mflx_hi: 20, rjmns: 12
                              <<< Loop-information  End >>>
       1082     6   p   2s             do k = KS, KE
       1083     6   p   2v                var_temp = var(k,i,j,iq)
       1084     6                         !--- update value with flux-divergence from the monotone scheme
       1085     6   p   2v                var(k,i,j,iq) = ( var(k,i,j,iq) * var_s(k,i,j,I_DENS)                                          &
       1086     6                                         + dtrk * ( - ( ( qflx_lo(k,i,j,ZDIR)-qflx_lo(k-1,i,  j,  ZDIR) ) * RDZC(k)     &
       1087     6                                                      + ( qflx_lo(k,i,j,XDIR)-qflx_lo(k  ,i-1,j,  XDIR) ) * RDXC(i)     &
       1088     6                                                      + ( qflx_lo(k,i,j,YDIR)-qflx_lo(k  ,i,  j-1,YDIR) ) * RDYC(j) ) ) &
       1089     6                                         ) / var(k,i,j,I_DENS)
       1090     6               
       1091     6                         ! --- STEP C: compute the outgoing fluxes in each cell ---
       1092     6   p   2v                pjmns = max( 0.D0, qflx_hi(k,i,j,ZDIR) ) - min( 0.D0, qflx_hi(k-1,i  ,j  ,ZDIR) ) &
       1093     6                               + max( 0.D0, qflx_hi(k,i,j,XDIR) ) - min( 0.D0, qflx_hi(k  ,i-1,j  ,XDIR) ) &
       1094     6                               + max( 0.D0, qflx_hi(k,i,j,YDIR) ) - min( 0.D0, qflx_hi(k  ,i  ,j-1,YDIR) )
       1095     6               
       1096     7   p   2s                if ( pjmns > 0 ) then
       1097     7   p   2s                   rjmns(k,i,j,ZDIR) = var_temp / pjmns * abs((mflx_hi(k,i,j,ZDIR)+mflx_hi(k-1,i  ,j  ,ZDIR)) * 0.5D0)
       1098     7   p   2s                   rjmns(k,i,j,XDIR) = var_temp / pjmns * abs((mflx_hi(k,i,j,XDIR)+mflx_hi(k  ,i-1,j  ,XDIR)) * 0.5D0)
       1099     7   p   2s                   rjmns(k,i,j,YDIR) = var_temp / pjmns * abs((mflx_hi(k,i,j,YDIR)+mflx_hi(k  ,i  ,j-1,YDIR)) * 0.5D0)
       1100     7   p   2v                endif
       1101     6   p   2v             enddo
       1102     5   p                  enddo
       1103     4   p                  enddo
       1104     3               
       1105     3                      ! --- [STEP 7S] limit the antidiffusive flux ---
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       1106     4  pp                  do j = JS-1, JE
       1107     5   p                  do i = IS-1, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 48
                              <<<      rjmns: 24, qflx_anti: 24
                              <<< Loop-information  End >>>
       1108     6   p   6s             do k = KS-1, KE
       1109     7   p   6m                if ( qflx_anti(k,i,j,ZDIR) >= 0 ) then
       1110     8   p   6s                   if ( rjmns(k  ,i,j,ZDIR) < 1.D0 ) then
       1111     8   p   6s                      qflx_anti(k,i,j,ZDIR) = qflx_anti(k,i,j,ZDIR) * rjmns(k  ,i,j,ZDIR)
       1112     8   p   6s                   endif
       1113     7   p    s                else
       1114     8   p    s                   if ( rjmns(k+1,i,j,ZDIR) < 1.D0 ) then
       1115     8   p    s                      qflx_anti(k,i,j,ZDIR) = qflx_anti(k,i,j,ZDIR) * rjmns(k+1,i,j,ZDIR)
       1116     8   p    s                   endif
       1117     7   p    v                endif
       1118     6   p    v             enddo
       1119     5   p                  enddo
       1120     4   p                  enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       1121     4  pp                  do j = JS-1, JE
       1122     5   p                  do i = IS-1, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 48
                              <<<      rjmns: 24, qflx_anti: 24
                              <<< Loop-information  End >>>
       1123     6   p   6s             do k = KS-1, KE
       1124     7   p   6m                if ( qflx_anti(k,i,j,XDIR) >= 0 ) then
       1125     8   p   6s                   if ( rjmns(k,i  ,j,XDIR) < 1.D0 ) then
       1126     8   p   6s                      qflx_anti(k,i,j,XDIR) = qflx_anti(k,i,j,XDIR) * rjmns(k,i  ,j,XDIR)
       1127     8   p   6s                   endif
       1128     7   p    s                else
       1129     8   p    s                   if ( rjmns(k,i+1,j,XDIR) < 1.D0 ) then
       1130     8   p    s                      qflx_anti(k,i,j,XDIR) = qflx_anti(k,i,j,XDIR) * rjmns(k,i+1,j,XDIR)
       1131     8   p    s                   endif
       1132     7   p    v                endif
       1133     6   p    v             enddo
       1134     5   p                  enddo
       1135     4   p                  enddo
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       1136     4  pp                  do j = JS-1, JE
       1137     5   p                  do i = IS-1, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 48
                              <<<      rjmns: 24, qflx_anti: 24
                              <<< Loop-information  End >>>
       1138     6   p   6s             do k = KS-1, KE
       1139     7   p   6m                if ( qflx_anti(k,i,j,YDIR) >= 0 ) then
       1140     8   p   6s                   if ( rjmns(k,i,j  ,YDIR) < 1.D0 ) then
       1141     8   p   6s                      qflx_anti(k,i,j,YDIR) = qflx_anti(k,i,j,YDIR) * rjmns(k,i,j  ,YDIR)
       1142     8   p   6s                   endif
       1143     7   p    s                else
       1144     8   p    s                   if ( rjmns(k,i,j+1,YDIR) < 1.D0 ) then
       1145     8   p    s                      qflx_anti(k,i,j,YDIR) = qflx_anti(k,i,j,YDIR) * rjmns(k,i,j+1,YDIR)
       1146     8   p    s                   endif
       1147     7   p    v                endif
       1148     6   p    v             enddo
       1149     5   p                  enddo
       1150     4   p                  enddo
       1151     3               
       1152     3                      !--- modify value with antidiffusive fluxes
                              <<< Loop-information Start >>>
                              <<<  [PARALLELIZATION]
                              <<<    Standard iteration count: 2
                              <<< Loop-information  End >>>
       1153     4  pp                  do j = JS, JE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    PREFETCH       : 4
                              <<<      RDXC: 4
                              <<< Loop-information  End >>>
       1154     5   p                  do i = IS, IE
                              <<< Loop-information Start >>>
                              <<<  [OPTIMIZATION]
                              <<<    SIMD
                              <<<    SOFTWARE PIPELINING
                              <<< Loop-information  End >>>
       1155     6   p   4v             do k = KS, KE
       1156     6   p   4v                var(k,i,j,iq) = var(k,i,j,iq) &
       1157     6                                       + dtrk * ( - ( ( qflx_anti(k,i,j,ZDIR)-qflx_anti(k-1,i,  j,  ZDIR) ) * RDZC(k)   &
       1158     6                                                    + ( qflx_anti(k,i,j,XDIR)-qflx_anti(k  ,i-1,j,  XDIR) ) * RDXC(i)   &
       1159     6                                                    + ( qflx_anti(k,i,j,YDIR)-qflx_anti(k  ,i,  j-1,YDIR) ) * RDYC(j) ) &
       1160     6                                                ) / var(k,i,j,I_DENS)
       1161     6   p   4v             enddo
       1162     5   p                  enddo
       1163     4   p                  enddo
       1164     3               
       1165     3                      call COMM_vars( var(:,:,:,iq), iq )
       1166     3               !       call COMM_wait( var(:,:,:,iq), iq )
       1167     3               
       1168     3                   enddo ! scalar quantities loop
       1169     2               
       1170     2                   call COMM_wait( var(:,:,:,iq-1), iq-1 )
       1171     2               
       1172     2                   else
       1173     2               
       1174     2                   call COMM_wait( var(:,:,:,I_RHOT), I_RHOT )
       1175     2               
       1176     2                   endif
       1177     1               
       1178     1               #ifdef _FPCOLL_
       1179     1               call STOP_COLLECTION("FCT")
       1180     1               #endif
       1181     1               
       1182     1                   enddo ! dynamical steps
       1183                     
       1184                     #ifdef _FPCOLL_
       1185                     call STOP_COLLECTION("DYNAMICS")
       1186                     #endif
       1187                     
       1188                         ! check total mass
       1189                     !    call COMM_total( var(:,:,:,:), A_NAME(:) )
       1190                     
       1191                         return
       1192                       end subroutine ATMOS_DYN
       1193                     
       1194                     end module mod_atmos_dyn

 Diagnostic messages: program name(mod_atmos_dyn)
   jwd8220o-i  "mod_atmos_dyn_fent_pdfct.f90", line 21: Optimizations performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
  Module subprogram name(ATMOS_DYN_setup)
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 138: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 139: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 142: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 149: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 152: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 157: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 162: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 165: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 176: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 177: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 180: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 187: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 190: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 195: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 200: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 203: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 214: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 215: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 218: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 225: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 228: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 233: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 238: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 241: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
  Module subprogram name(ATMOS_DYN)
   jwd2006i-i  "mod_atmos_dyn_fent_pdfct.f90", line 334: 'iv' is declared but never referenced.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 362: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 363: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 364: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 365: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 366: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 374: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 375: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 379: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 380: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 381: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 384: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 387: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 399: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 414: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 415: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 421: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 433: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 434: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 437: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 441: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 444: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 452: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 453: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 459: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 472: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 473: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 479: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 493: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 494: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 499: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 502: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 504: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 505: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 510: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 514: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 515: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 516: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 521: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 528: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 529: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 534: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 537: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 539: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 540: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 545: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 549: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 550: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 551: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 556: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 563: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 564: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 569: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 572: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 574: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 575: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 580: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 584: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 585: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 586: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 591: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8220o-i  "mod_atmos_dyn_fent_pdfct.f90", line 602: Optimizations performed in this program unit with possibility of side effects. See informational messages below to determine which such optimizations have been performed.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 615: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 616: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 622: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 623: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 625: Invariant expression within loop moved outside loop.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 630: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 631: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 633: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 639: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 640: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 642: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 651: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 652: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 658: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 659: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 661: Invariant expression within loop moved outside loop.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 666: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 667: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 675: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 676: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 692: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 693: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 703: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 704: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 714: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 715: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 730: Invariant expression within loop moved outside loop.
   jwd8206o-i  "mod_atmos_dyn_fent_pdfct.f90", line 731: Division changed to multiplication by reciprocal.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 731: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 732: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 740: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 741: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd3117i-w  "mod_atmos_dyn_fent_pdfct.f90", line 747: Length of line in free source form is not standard-conforming.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 748: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 755: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 756: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 760: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 771: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 772: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 780: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 781: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd3117i-w  "mod_atmos_dyn_fent_pdfct.f90", line 782: Length of line in free source form is not standard-conforming.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 782: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 785: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 789: Invariant expression within loop moved outside loop.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 794: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 795: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 805: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 806: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 817: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 818: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd3117i-w  "mod_atmos_dyn_fent_pdfct.f90", line 823: Length of line in free source form is not standard-conforming.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 824: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 834: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 835: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 844: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 845: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd3117i-w  "mod_atmos_dyn_fent_pdfct.f90", line 846: Length of line in free source form is not standard-conforming.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 846: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 849: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 853: Invariant expression within loop moved outside loop.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 858: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 859: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 869: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 870: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 881: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 882: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd3117i-w  "mod_atmos_dyn_fent_pdfct.f90", line 887: Length of line in free source form is not standard-conforming.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 888: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 899: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 907: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 908: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 916: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 918: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 921: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 925: Invariant expression within loop moved outside loop.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 930: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 931: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 941: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 942: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 953: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 954: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd3117i-w  "mod_atmos_dyn_fent_pdfct.f90", line 958: Length of line in free source form is not standard-conforming.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 959: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 976: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1009: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1010: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1011: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1012: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1019: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1020: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1032: Invariant expression within loop moved outside loop.
   jwd3117i-w  "mod_atmos_dyn_fent_pdfct.f90", line 1034: Length of line in free source form is not standard-conforming.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1034: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd3117i-w  "mod_atmos_dyn_fent_pdfct.f90", line 1036: Length of line in free source form is not standard-conforming.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1036: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1049: Invariant expression within loop moved outside loop.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1053: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1054: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1067: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1068: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1082: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1085: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1092: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1124: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1129: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8201o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1155: Invariant expression within loop moved outside loop.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1156: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.
   jwd8209o-i  "mod_atmos_dyn_fent_pdfct.f90", line 1161: Evaluation order of polynomial expression changed according to commutative law of addition and multiplication.

 Procedure information
   Lines      : 1194
   Statements : 670
   Stack(byte): 5072
   Prefetch num: 366

 Total information
   Procedures       : 1
   Total lines      : 1194
   Total statements : 670
   Total stack(byte): 5072
   Total prefetch num: 366

